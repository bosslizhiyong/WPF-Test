<%@ CodeTemplate Language="C#" TargetLanguage="Text"  ResponseEncoding="UTF-8"  Debug="True" Description="Template description here." %>
<%@ Property Name="Tables" Type="SchemaExplorer.TableSchemaCollection" Category="数据表(可多选)" %>
<%@ Property Name="ConnName" Type="ConnNameEnum" Category="Collection"  %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %> 
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Design" %>
<%

Tables = TableUtilities.FilterTables(Tables);
if(!Directory.Exists(OutputDirectory)) Directory.CreateDirectory(OutputDirectory); 
CodeTemplate ModelObjectTemplate = GetCodeTemplate("DataEntity.cst");
CodeTemplate DALObjectTemplate = GetCodeTemplate("DAO.cst");

string ModelDirectory = OutputDirectory + "\\DataEntitys\\";
string DalDirectory = OutputDirectory + "\\DAOS\\";

if(!Directory.Exists(ModelDirectory)) Directory.CreateDirectory(ModelDirectory);
if(!Directory.Exists(DalDirectory)) Directory.CreateDirectory(DalDirectory);

for (int i = 0; i < Tables.Count; i++)
{
    RenderFileUsingProperties(ModelDirectory + GetClassName(Tables[i]) + ".cs",true,ref ModelObjectTemplate,Tables[i]);
	Response.WriteLine("生成 "+GetClassName(Tables[i]) + ".cs");
	RenderFileUsingProperties(DalDirectory + GetClassName(Tables[i]) + "DAO.cs",true,ref DALObjectTemplate,Tables[i]);
	Response.WriteLine("生成 "+GetClassName(Tables[i]) + "DAO.cs");
}
%>

成功@@


<script runat="template">
public enum ConnNameEnum  
{  
    ConnCRM,  
    ConnQueryCRM,  
    ConnCRMCo,
	ConnQueryCRMCo
}

#region Properties
    #region NameSpace
	private string _NameSpace = "Accp";
    [Category("命名空间")]
	[Description("NameSpace for class.")]
    public string NameSpace
    {
     	get 
		{
			return _NameSpace;
		}
     	set 
    	{
    		_NameSpace = value;
    	}
    }
	#endregion
	
    #region Namespaces
	
	#endregion
	
	
	
	#endregion
	
    #region Output
    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("代码输出路径")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"C:\ProjectManage";
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	#endregion

	#region DBList
   // private CodeSmith.CustomProperties.StringCollection _DBList = 
	//  new CodeSmith.CustomProperties.StringCollection(new string[]{"ElfinNetDB"});

  //  [CodeTemplateProperty(CodeTemplatePropertyOption.Required)]
	//[Category("Database")]
	//[Description("Database List")]
	//public CodeSmith.CustomProperties.StringCollection DBList
	//{ 
	////	get
	//	{
	//		if(_DBList==null || _DBList.Count<=0 || _DBList[0].Length==0)
	//		    return null;
	//		return _DBList;
	//	}
	//	set
	//	{
		//	if(value==null || value.Count<=0)
	//		{
		//	    _DBList = null;
		//	}
		//	else
		//	{
		//	    _DBList = value;
		//	}
		//} 
	//}
	#endregion
//#endregion

#region Methods
	#region Get Template
	public  CodeTemplate GetCodeTemplate(string TemplateName)
	{		
		//CodeTemplate template=null;
		CodeTemplateCompiler compiler = new CodeTemplateCompiler(this.CodeTemplateInfo.DirectoryName+TemplateName); 
		compiler.CodeTemplateInfo.ToString();
		compiler.Compile(); 
		if (compiler.Errors.Count == 0) 
		{ 
			return compiler.CreateInstance();
		} 
		else 
		{ 
			System.Text.StringBuilder errorMessage = new System.Text.StringBuilder();				
			for (int i = 0; i < compiler.Errors.Count; i++) 
			{
				errorMessage.Append(compiler.Errors[i].ToString()).Append("\n");
			} 
			throw new ApplicationException(errorMessage.ToString());
		} 
		      
		return null;
	}
	#endregion
	
	#region Render File
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file 
	/// NB. the overrite property
	/// Set Property SourceTable
	public void RenderFileUsingProperties(string fullPath, bool overrite, ref CodeTemplate template,TableSchema SourceTable)
	{
		if( overrite || (!File.Exists(fullPath)) )
		{
			CopyPropertiesTo(template);
			template.SetProperty("SourceTable",SourceTable);
			template.RenderToFile(fullPath, overrite);
		}
	}
	
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the preserve regions merge stratagy
	/// Set Property SourceTable
	public void MergeFileUsingPreserve(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.PreserveRegionsMergeStrategy preserveRegionsMergeStrategy = new PreserveRegionsMergeStrategy();
		preserveRegionsMergeStrategy.Language = "C#";
		preserveRegionsMergeStrategy.RegionNameRegex = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,preserveRegionsMergeStrategy);
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	/// Copies all properties to a template
	/// Renders the file  using the Insert Region merge strategy
	/// Set Property SourceTable
	public void MergeFileUsingInsert(string fullPath, ref CodeTemplate template,TableSchema SourceTable)
	{		
		CodeSmith.Engine.InsertRegionMergeStrategy mergeStrategy = new InsertRegionMergeStrategy();
		mergeStrategy.Language = "C#";
		mergeStrategy.RegionName = "PRESERVE";
		CopyPropertiesTo(template);
		template.SetProperty("SourceTable",SourceTable);
		template.RenderToFile(fullPath,mergeStrategy);
		
	}
	#endregion
#endregion	

#region Inner Classes	
	#region TableUtilities Class
	public class TableUtilities
	{
		public static bool SkipTable(TableSchema table)
		{
			return (table.PrimaryKey == null || table.Columns.Count < 2);
		}
		public static TableSchemaCollection FilterTables(TableSchemaCollection tables)
        {			
            TableSchemaCollection filtered = new TableSchemaCollection();
            foreach(TableSchema table in tables) 
            {
                if(!SkipTable(table)) filtered.Add(table);
            }
            return filtered;
        }
	}
	
	public static string GetClassName(TableSchema table)
    {
		
		if(table==null)
		{
		    return null;
		}
		string str=table.Name;
		str = str.Substring(0,1).ToUpper() + str.Substring(1);
		return str ;
    }
	#endregion
#endregion	
</script>