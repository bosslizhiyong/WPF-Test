<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkNet</name>
    </assembly>
    <members>
        <member name="T:ThinkNet.Command.Core.Command">
            <summary>
            命令抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Command.Core.ICommand">
            <summary>
            命令接口
            作用：1、封装命令数据，以属性为主，少量简单方法(不包含业务逻辑)
                  2、实现编译时约束，可以限制传入CommandExecutor的都是Command对象，而不会不小心传错对象（所有的Command对象都必须实现ICommand接口）
            </summary>
        </member>
        <member name="P:ThinkNet.Command.Core.ICommand.Key">
            <summary>
            命令唯一标识(GUID)
            </summary>
        </member>
        <member name="P:ThinkNet.Command.Core.ICommand.SimpleResult">
            <summary>
            命令执行简单结果描述
            </summary>
        </member>
        <member name="P:ThinkNet.Command.Core.Command.Key">
            <summary>
            命令唯一标识(GUID)
            </summary>
        </member>
        <member name="P:ThinkNet.Command.Core.Command.SimpleResult">
            <summary>
            命令执行简单结果描述
            </summary>
        </member>
        <member name="T:ThinkNet.Command.Core.DefaultCommandBus">
            <summary>
            默认的命令总线
            </summary>
        </member>
        <member name="T:ThinkNet.Command.Core.ICommandBus">
            <summary>
            命令总线接口
            作用：1、将一个Command派发给相应的CommandExecutor去执行
            </summary>
        </member>
        <member name="M:ThinkNet.Command.Core.ICommandBus.Send``1(``0)">
            <summary>
            派发命令
            </summary>
            <typeparam name="TCommand">命令类型</typeparam>
            <param name="cmd">命令</param>
        </member>
        <member name="P:ThinkNet.Command.Core.ICommandBus.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="M:ThinkNet.Command.Core.DefaultCommandBus.Send``1(``0)">
            <summary>
            派发命令
            </summary>
            <typeparam name="TCommand">命令类型</typeparam>
            <param name="cmd">命令</param>
        </member>
        <member name="P:ThinkNet.Command.Core.DefaultCommandBus.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="T:ThinkNet.Command.Core.ICommandExecutor`1">
            <summary>
            命令执行器接口
            作用：1、验证传入的Command对象是否合法(非验证业务逻辑)
                  2、调用领域模型完成操作
            </summary>
        </member>
        <member name="M:ThinkNet.Command.Core.ICommandExecutor`1.Execute(`0)">
            <summary>
            执行命令
            </summary>
            <param name="cmd">命令</param>
        </member>
        <member name="M:ThinkNet.Command.Core.ICommandExecutor`1.Execute(`0,System.String)">
            <summary>
            执行命令
            </summary>
            <param name="cmd">命令</param>
            <param name="connectionStringName">外部设置的数据库名称</param>
        </member>
        <member name="T:ThinkNet.DataEntity.Core.ConnectionStrings">
            <summary>
            数据库连接名称(枚举)
            </summary>
        </member>
        <member name="T:ThinkNet.DataEntity.Core.DataEntityActions">
            <summary>
            实体动作(枚举)
            </summary>
        </member>
        <member name="T:ThinkNet.DataEntity.Core.DataEntityBase">
            <summary>
            业务扩展类
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._IsAutoID">
            <summary>
            主键是否自增长字段ID
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._PrimaryKey">
            <summary>
            主健字段
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._ConnectionStringsName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._IsExternalConnection">
            <summary>
            是否外部设置数据库
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._DataEntityAction">
            <summary>
            实体动作
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._KeyID">
            <summary>
            实体唯一标识值
            </summary>
        </member>
        <member name="M:ThinkNet.DataEntity.Core.DataEntityBase.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThinkNet.DataEntity.Core.DataEntityBase._StockID">
            <summary>
            仓库量ID
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.IsAutoID">
            <summary>
            主键是否自增长字段ID
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.PrimaryKey">
            <summary>
            主健字段
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.ConnectionStringsName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.IsExternalConnection">
            <summary>
            是否外部设置数据库
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.DataEntityAction">
            <summary>
            实体动作
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.KeyID">
            <summary>
            实体唯一标识值
            </summary>
        </member>
        <member name="P:ThinkNet.DataEntity.Core.DataEntityBase.StockID">
            <summary>
            仓库量ID
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.AggregateRoot">
            <summary>
            聚合根抽象基类
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IAggregateRoot">
            <summary>
            聚合根接口,继承于该接口的类都是聚合根类
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainEntity">
            <summary>
            领域实体接口,继承于该接口的类都是领域实体类
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.IDomainEntity.Key">
            <summary>
            当前领域实体的全局唯一标识
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.AggregateRoot.SimpleResult">
            <summary>
            简单结果描述
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.DomainEvent">
            <summary>
            领域事件抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainEvent">
            <summary>
            领域事件接口
            </summary>
        </member>
        <member name="T:ThinkNet.Event.Core.IEvent">
            <summary>
            事件接口(企业级应用程序事件大致分为：系统事件、应用事件和领域事件)
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.IDomainEvent.EventSource">
            <summary>
            领域事件的事件源对象
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainEvent.#ctor(ThinkNet.Domain.Core.IDomainEntity)">
            <summary>
            
            </summary>
            <param name="eventSource">代表事件来源的领域实体</param>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainEventHandler`1">
            <summary>
            领域事件处理器接口
            </summary>
            <typeparam name="TDomainEvent"></typeparam>
        </member>
        <member name="T:ThinkNet.Event.Core.IEventHandler`1">
            <summary>
            事件处理器接口
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="T:ThinkNet.Domain.Core.DomainService">
            <summary>
            领域服务抽象基类
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainService">
            <summary>
            领域服务接口
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.Add``1(``0)">
            <summary>
            将指定的数据实体添加到服务中
            </summary>
            <param name="dataEntity">数据实体</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.Update``1(``0)">
            <summary>
            更新服务中指定的数据实体
            </summary>
            <param name="dataEntity">数据实体</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.Delete``1(``0)">
            <summary>
            将指定的数据实体从服务中删除
            </summary>
            <param name="dataEntity">数据实体</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="strSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.ExecuteInsertSql(System.String)">
            <summary>
            执行插入语句
            </summary>
            <param name="insertSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.ExecuteUpdateSql(System.String)">
            <summary>
            执行更新语句
            </summary>
            <param name="updateSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.ExecuteDeleteSql(System.String)">
            <summary>
            执行删除语句
            </summary>
            <param name="deleteSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <param name="direction">输入或输出(ParameterDirection.Input/ParameterDirection.Output)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainService.ExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="P:ThinkNet.Domain.Core.IDomainService.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.IDomainService.Context">
            <summary>
            当前服务所使用的上下文实例
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.IDomainService.SimpleResult">
            <summary>
            简单结果描述
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainServiceUnitOfWork">
            <summary>
            领域服务工作单元
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceUnitOfWork.PersistExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="F:ThinkNet.Domain.Core.DomainService._connectionStringName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="F:ThinkNet.Domain.Core.DomainService.context">
            <summary>
            领域服务上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainService.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainService.#ctor(ThinkNet.Domain.Core.IDomainServiceContext,System.String)">
            <summary>
            重载构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainService.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="strSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainService.PersistExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="strSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainService.CreateClusteDAO">
            <summary>
            创建集群数据访问对象
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.DomainService.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.DomainService.Context">
            <summary>
            领域服务上下文
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.DomainService.SimpleResult">
            <summary>
            简单结果描述
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IDomainServiceContext">
            <summary>
            领域服务上下文接口
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.IUnitOfWork">
            <summary>
            Unit Of Work类接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IUnitOfWork.Commit">
            <summary>
            提交当前的Unit Of Work事务。
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterAdd``1(``0,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            将指定的数据实体添加到服务中
            </summary>
            <param name="dataEntity">数据实体实例</param>
            <param name="serviceUnitOfWork">服务工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterUpdate``1(``0,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            更新服务中指定的数据实体
            </summary>
            <param name="dataEntity">数据实体实例</param>
            <param name="serviceUnitOfWork">服务工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterDelete``1(``0,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            将指定的聚合根从仓储中删除
            </summary>
            <param name="dataEntity">数据实体实例</param>
            <param name="serviceUnitOfWork">服务工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterSql(System.String,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册SQL语句
            </summary>
            <param name="strSql">SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterInsertSql(System.String,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册插入SQL语句
            </summary>
            <param name="insertSql">插入SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterUpdateSql(System.String,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="updateSql">更新SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterDeleteSql(System.String,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="deleteSql">删除SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IDomainServiceContext.RegisterProcedure(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Data.Common.DbParameter}},ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册存储过程
            </summary>
            <param name="dicProcedure">存储过程字典(存储过程名称及参数列表)</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainServiceContext.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.DomainServiceContext.RegisterSql(System.String,ThinkNet.Domain.Core.IDomainServiceUnitOfWork)">
            <summary>
            注册SQL语句
            </summary>
            <param name="strSql">SQL语句</param>
        </member>
        <member name="T:ThinkNet.Domain.Core.SQLDomainService">
            <summary>
            基于SQLServer的服务抽象基类
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLDomainService.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLDomainService.#ctor(ThinkNet.Domain.Core.IDomainServiceContext,System.String,ThinkNet.Persistence.Core.IDAOCenter)">
            <summary>
            重载构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLDomainService.CreateDAO``1">
            <summary>
            创建数据访问对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLDomainService.CreateClusteDAO">
            <summary>
            创建集群数据访问对象
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IRepository`1">
            <summary>
            应用于某种聚合根的仓储类的接口
            </summary>
            <typeparam name="TAggregateRoot">聚合根类型</typeparam>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.Add(`0)">
            <summary>
            将指定的聚合根添加到仓储中
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.Update(`0)">
            <summary>
            更新仓储中指定的聚合根
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.Delete(`0)">
            <summary>
            将指定的聚合根从仓储中删除
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.ExecuteInsertSql(System.String)">
            <summary>
            执行插入语句
            </summary>
            <param name="insertSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.ExecuteUpdateSql(System.String)">
            <summary>
            执行更新语句
            </summary>
            <param name="updateSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.ExecuteDeleteSql(System.String)">
            <summary>
            执行删除语句
            </summary>
            <param name="deleteSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepository`1.ExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="P:ThinkNet.Domain.Core.IRepository`1.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.IRepository`1.Context">
            <summary>
            当前仓储所使用的仓储上下文实例
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.IRepositoryContext">
            <summary>
            仓储上下文接口
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterAdd(ThinkNet.Domain.Core.AggregateRoot,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            将指定的聚合根添加到仓储中
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
            <param name="repositoryUnitOfWork">仓储工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterUpdate(ThinkNet.Domain.Core.AggregateRoot,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            更新仓储中指定的聚合根
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
            <param name="repositoryUnitOfWork">仓储工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterDelete(ThinkNet.Domain.Core.AggregateRoot,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            将指定的聚合根从仓储中删除
            </summary>
            <param name="aggregateRoot">聚合根实例</param>
            <param name="repositoryUnitOfWork">仓储工作单元实例</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterInsertSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册插入SQL语句
            </summary>
            <param name="insertSql">插入SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterUpdateSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="updateSql">更新SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterDeleteSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="deleteSql">删除SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryContext.RegisterProcedure(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Data.Common.DbParameter}},ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册存储过程
            </summary>
            <param name="dicProcedure">存储过程字典(存储过程名称及参数列表)</param>
        </member>
        <member name="T:ThinkNet.Domain.Core.IRepositoryUnitOfWork">
            <summary>
            仓储工作单元接口
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.IRepositoryUnitOfWork.PersistExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="T:ThinkNet.Domain.Core.Repository`1">
            <summary>
            仓储抽象基类
            </summary>
            <typeparam name="TAggregateRoot">聚合根类型</typeparam>
        </member>
        <member name="F:ThinkNet.Domain.Core.Repository`1._connectionStringName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="F:ThinkNet.Domain.Core.Repository`1.context">
            <summary>
            仓储上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.#ctor(ThinkNet.Domain.Core.IRepositoryContext,System.String)">
            <summary>
            重载构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.ExecuteInsertSql(System.String)">
            <summary>
            执行插入语句
            </summary>
            <param name="insertSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.ExecuteUpdateSql(System.String)">
            <summary>
            执行更新语句
            </summary>
            <param name="updateSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.ExecuteDeleteSql(System.String)">
            <summary>
            执行删除语句
            </summary>
            <param name="deleteSql"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.ExecuteProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.Repository`1.CreateClusteDAO">
            <summary>
            创建集群数据访问对象
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.Repository`1.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Domain.Core.Repository`1.Context">
            <summary>
            仓储上下文
            </summary>
        </member>
        <member name="T:ThinkNet.Domain.Core.RepositoryContext">
            <summary>
            仓储上下文抽象基类
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.RepositoryContext.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.RepositoryContext.RegisterInsertSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册插入SQL语句
            </summary>
            <param name="insertSql">插入SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.RepositoryContext.RegisterUpdateSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="updateSql">更新SQL语句</param>
        </member>
        <member name="M:ThinkNet.Domain.Core.RepositoryContext.RegisterDeleteSql(System.String,ThinkNet.Domain.Core.IRepositoryUnitOfWork)">
            <summary>
            注册更新SQL语句
            </summary>
            <param name="deleteSql">删除SQL语句</param>
        </member>
        <member name="T:ThinkNet.Domain.Core.SQLRepository`1">
            <summary>
            基于SQLServer的仓储抽象基类
            </summary>
            <typeparam name="TAggregateRoot">聚合根类型</typeparam>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLRepository`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLRepository`1.#ctor(ThinkNet.Domain.Core.IRepositoryContext,System.String,ThinkNet.Persistence.Core.IDAOCenter)">
            <summary>
            重载构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLRepository`1.CreateDAO``1">
            <summary>
            创建数据访问对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Domain.Core.SQLRepository`1.CreateClusteDAO">
            <summary>
            创建集群数据访问对象
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ApiStrResult">
            <summary>
            Json字符串数据结果描述
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ApiStrResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ApiStrResult.#ctor(System.Int32,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="code">错误码</param>
            <param name="data">数据</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ApiStrResult.code">
            <summary>
            错误码1
            200：正常 400：错误
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ApiStrResult.data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ICacheManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">缓存健</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.Set``1(System.String,``0,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">缓存健</param>
            <param name="data">缓存值</param>
            <param name="seconds">缓存时间</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.Exists(System.String)">
            <summary>
            是否已经设置缓存
            </summary>
            <param name="key">缓存健</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存健</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.RemoveByPattern(System.String)">
            <summary>
            根据键值对的模式删除缓存
            </summary>
            <param name="pattern">正则表达式</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ICacheManager.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.MemoryCacheManager">
            <summary>
            MemoryCache缓存管理类(实现微软缓存机制 引用System.Runtime.Caching.dll)
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">缓存健</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Get``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            获取缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">缓存健</param>
            <param name="second">缓存时间</param>
            <param name="func">当取不到缓存时,设置缓存的方法</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Get``1(System.String,System.Func{``0})">
            <summary>
            获取缓存(默认缓存60秒)
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="key">缓存健</param>
            <param name="func">当取不到缓存时,设置缓存的方法</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Set``1(System.String,``0,System.Int32)">
            <summary>
            设置缓存
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">缓存健</param>
            <param name="data">缓存值</param>
            <param name="seconds">缓存时间</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Exists(System.String)">
            <summary>
            是否已经设置缓存
            </summary>
            <param name="key">缓存健</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存健</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            根据键值对的模式删除缓存
            </summary>
            <param name="pattern">正则表达式</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.MemoryCacheManager.GetCacheKeysByPattern(System.String)">
            <summary>
            根据键值对的模式获取缓存
            </summary>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.RedisCacheManager">
            <summary>
            Redis缓存管理类(免费的Redis客服端是StackExchange.Redis)
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GridviewControl.MasterSlave(System.Data.DataTable,System.String,System.Data.DataTable,System.String,System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            主从表
            </summary>
            <param name="master">主表</param>
            <param name="ID">主键ID</param>
            <param name="slave">从表</param>
            <param name="slaveID">从表ID</param>
            <param name="slaveTitleName">从表标题名称</param>
            <param name="Display">是否显示从表的列</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.EasyuiTreeNode">
            <summary>
            Easyui树控件节点描述类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EasyuiTreeNode.#ctor">
            <summary>
            Easyui树控件节点的类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EasyuiTreeNode.AddChildren(ThinkNet.Infrastructure.Core.EasyuiTreeNode)">
            <summary>
            添加一个子节点
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.EasyuiTreeNode.id">
            <summary>
            节点标识
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.EasyuiTreeNode.text">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.EasyuiTreeNode.state">
            <summary>
            节点状态【 'open:展开' or 'closed:折叠'】
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.EasyuiTreeNode.attributes">
            <summary>
            节点的扩展属性
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.EasyuiTreeNode.children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.EasyuiTreeNode.NodeState">
            <summary>
            节点状态
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.EasyuiTreeNode.NodeState.open">
            <summary>
            展开
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.EasyuiTreeNode.NodeState.closed">
            <summary>
            折叠
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.DefaultExportTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.DefaultExportTypes.ListDataTable">
            <summary>
            数据集列表
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.DefaultExportTypes.ListExportRow">
            <summary>
            导出行列表
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.DefaultExportTypes.DataSet">
            <summary>
            数据集DataSet
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.DefaultExportTypes.DataTable">
            <summary>
            数据集DataTable
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.DefaultExportHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.IExportHandler">
            <summary>
            导出接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.GetExportColumnList">
            <summary>
            获取要导出列的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.GetExportColumnDictionary">
            <summary>
            获取要导出列的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.GetExportColumnListByCategory(System.String)">
            <summary>
            获取要导出列的列表
            </summary>
            <param name="category">类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.String,System.String,System.Object)">
            <summary>
            将数据导出到Excel
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataToExcelByTemplate(System.String,System.String,System.String,System.Object)">
            <summary>
            根据模板将数据导出到Excel
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataTableToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Data.DataTable,System.String,System.String)">
            <summary>
            将DataTable的数据导出到Excel
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dtData">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportListDataTableToExcel(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.List{System.Data.DataTable},System.String,System.String)">
            <summary>
            将ListDataTable的数据导出到Excel(导出单个个工作簿)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dataTables">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataSetToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Data.DataSet,System.String)">
            <summary>
            将DataSet的数据导出到Excel(导出多个工作簿)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dsData">要导出的数据集</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportListRowToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportRow},System.String,System.String)">
            <summary>
            将ListRow的数据导出到Excel(在客户端获取数据)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="rows">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataToExcelByTemplate(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},System.String,System.String)">
            <summary>
            根据模板将数据导出到Excel
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="dicColumns">要导出的列集合(如果为空默认导出所有已配置的列,字典键：类别)</param>
            <param name="dicData">要导出的数据集(字典键值：类别)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.ExportDataToExcelByTemplate(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Data.DataTable}},System.String,System.String)">
            <summary>
            根据模板将数据导出到Excel(多个工作簿)
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="dicColumns">要导出的列集合(如果为空默认导出所有已配置的列,字典键：类别)</param>
            <param name="dicDicData">要导出的数据集(字典键值：类别)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IExportHandler.GetExportData(System.Object)">
            <summary>
            获取要导出数据
            </summary>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns>返回DataTable集合或返回ExportRow列表</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="schemaPath">xml配置路径</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetTableSchemaToExportColumn(System.String)">
            <summary>
            获取xml配置定义的结构
            </summary>
            <param name="schemaPath">xml配置路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetExportColumnList">
            <summary>
            获取导出列的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetExportColumnDictionary">
            <summary>
            获取要导出列的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetExportColumnListByCategory(System.String)">
            <summary>
            获取要导出列的列表
            </summary>
            <param name="category">类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.String,System.String,System.Object)">
            <summary>
            将数据导出到Excel
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataToExcelByTemplate(System.String,System.String,System.String,System.Object)">
            <summary>
            根据模板将数据导出到Excel
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="templateSheetName">模板中工作簿的名称</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataTableToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Data.DataTable,System.String,System.String)">
            <summary>
            将DataTable的数据导出到Excel
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dtData">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportListDataTableToExcel(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.List{System.Data.DataTable},System.String,System.String)">
            <summary>
            将ListDataTable的数据导出到Excel(导出单个个工作簿)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dataTables">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataSetToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Data.DataSet,System.String)">
            <summary>
            将DataSet的数据导出到Excel(导出多个工作簿)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="dsData">要导出的数据集</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportListRowToExcel(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn},System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportRow},System.String,System.String)">
            <summary>
            将ListRow的数据导出到Excel(在客户端获取数据)
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <param name="rows">要导出的数据集</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataToExcelByTemplate(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},System.String,System.String)">
            <summary>
            根据模板将数据导出到Excel
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="templateSheetName">模板中工作簿的名称</param>
            <param name="dicColumns">要导出的列集合(如果为空默认导出所有已配置的列,字典键：类别)</param>
            <param name="dicData">要导出的数据集(字典键值：类别)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ExportDataToExcelByTemplate(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn}},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Data.DataTable}},System.String,System.String)">
            <summary>
            根据模板将数据导出到Excel(多个工作簿)
            </summary>
            <param name="templatePath">excel模板路径(全路径)</param>
            <param name="dicColumns">要导出的列集合(如果为空默认导出所有已配置的列,字典键：类别)</param>
            <param name="dicDicData">要导出的数据集(字典键值：类别)</param>
            <param name="sheetName">要导出的工作簿名称</param>
            <param name="fileName">导出的文件名称(包括路径)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetExportData(System.Object)">
            <summary>
            获取要导出数据
            </summary>
            <param name="queryCondictions">查询条件或语句(自定义)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.ReplaceCellValueByTemplateStr(NPOI.SS.UserModel.ISheet,System.String,System.Object,System.String,System.Int32,System.Int32)">
            <summary>
            替换模板工作簿中的标识字符串
            </summary>
            <param name="sheetTemplate">模板工作簿</param>
            <param name="cellTemplate">单元格标识字符串</param>
            <param name="cellValue">替换的值</param>
            <param name="dataType">值类型</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetTemplateStrValue(System.Data.DataTable,System.String)">
            <summary>
            获取模板标识字符串的值
            </summary>
            <param name="dtData">数据集合</param>
            <param name="columnName">列</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetTemplateRowIndexByCellValue(NPOI.SS.UserModel.ISheet,System.String)">
            <summary>
            根据单元格值返回其所在的行号
            </summary>
            <param name="sheetTemplate">模板工作簿</param>
            <param name="cellVale">单元格值</param>
            <returns>找到返回行号,找不到返回-1</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetTemplateRowIndexByCellCommentString(NPOI.SS.UserModel.ISheet,System.String)">
            <summary>
            根据单元格值返回其所在的行号
            </summary>
            <param name="sheetTemplate">模板工作簿</param>
            <param name="cellCommentString">单元格批注</param>
            <returns>找到返回行号,找不到返回-1</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.CreateLineTemplate(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32)">
            <summary>
            创建明细行模板
            </summary>
            <param name="sheetTemplate">模板工作簿</param>
            <param name="lineStartIndex">开始行号</param>
            <param name="lineCount">总行数</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.GetExportColumns(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.ExportColumn})">
            <summary>
            获取要导出的列集合并进行排序
            </summary>
            <param name="columns">要导出的列集合(如果为空默认导出所有已配置的列)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.LoadXmlDocument(System.String)">
            <summary>
            xml模板文档对象
            </summary>
            <param name="schemaPath">xml模板路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIExportHandler.LoadWorkbook(System.String)">
            <summary>
            Excel模板工作簿对象
            </summary>
            <param name="templatePath">excel模板路径</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIExportHandler.DataTableSchema">
            <summary>
            xml配置的文档对象
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.DefaultExportHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.DefaultExportHandler.#ctor(ThinkNet.Command.Core.ICommandBus,ThinkNet.Query.Core.IDynamicQuery)">
            <summary>
            
            </summary>
            <param name="commandBus"></param>
            <param name="queryService"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.DefaultExportHandler.GetExportData(System.Object)">
            <summary>
            
            </summary>
            <param name="queryCondictions"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.DefaultExportHandler.CommandBus">
            <summary>
            命令总线
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.DefaultExportHandler.QueryService">
            <summary>
            查询服务
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelExport.ExecuteExcelExport(System.String,System.String,System.String,System.Data.DataSet)">
            <summary>
            生成excel
            </summary>
            <param name="templatePath">模板路径</param>
            <param name="saveFolder">保存文件夹路径</param>
            <param name="sheetName">工作薄名</param>
            <param name="ds">数据源</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelExport.InitializeWorkbook(System.String)">
            <summary>
            初始化Excel模板
            </summary>
            <param name="path">模板路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelExport.SetCellValueByTemplateStr(NPOI.SS.UserModel.ISheet,System.String,System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据Excel模板单元格内容，找出单元格，并设置单元格的值
            </summary>
            <param name="sheet">ExcelSheet</param>
            <param name="cellTemplateValue">模板内容</param>
            <param name="cellFillValue">单元格值</param>
             <param name="rowFristIndex">表行索引，配合conNextRow=true使用</param>
             <param name="rowCount">表总行数，配合conNextRow=true使用</param>
             <param name="conNextRow">是否承接下一行，即：填充下一行单元格模板内容,填写表明细数据时才用到</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelExport.CreateSheet(NPOI.SS.UserModel.ISheet,System.Int32,System.Int32)">
            <summary>
            根据表明细行数生成虚拟工作薄
            </summary>
            <param name="sheet">ExcelSheet</param>
            <param name="footIndex">表尾索引</param>
            <param name="gridRowCount">表行数</param>
            <param name="gridColumnCount">表列数</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelExport.GetGridRowIndex(NPOI.SS.UserModel.ISheet,System.String)">
            <summary>
            获取表头索引号
            </summary>
            <param name="sheet">ExcelSheet</param>
            <param name="cellTemplateValue">模板内容</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ExportColumn">
            <summary>
            数据列对象
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExportColumn.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExportColumn.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="columnName">列名,对应字段名(英文)</param>
            <param name="description">列名,对应字段描述(中文)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExportColumn.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="columnName">列名,对应字段名(英文)</param>
            <param name="description">列名,对应字段描述(中文)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExportColumn.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="columnName">列名,对应字段名(英文)</param>
            <param name="description">列名,对应字段描述(中文)</param>
            <param name="dataType">字段类型</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.ColumnName">
            <summary>
            列名,对应字段名(英文)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.Description">
            <summary>
            列名,对应字段描述(中文)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.DataType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.ColumnNumber">
            <summary>
            列号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.ColumnWidth">
            <summary>
            列宽
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.DataValue">
            <summary>
            数据值
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportColumn.Category">
            <summary>
            类别
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ExportRow">
            <summary>
            数据行对象
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExportRow.#ctor">
            <summary>
            数据行对象
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportRow.RowIndex">
            <summary>
            数据行号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExportRow.Columns">
            <summary>
            数据列
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.Extensions">
            <summary>
            扩展工具类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Extensions.JoinToString(System.Collections.IList,System.String)">
            <summary>
            集合对象自动拼接成字符串
            </summary>
            <param name="list">List集合</param>
            <param name="joinChar">拼接字符(如:,或AND之类)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Extensions.JoinToString(System.Collections.IList)">
            <summary>
            集合对象自动拼接成字符串(逗号分隔)
            </summary>
            <param name="list">List集合</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.FTPClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.socketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.ASCII">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.FTPClient.buffer">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Connect">
            <summary>
            建立连接 
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.SetTransferType(ThinkNet.Infrastructure.Core.FTPClient.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Dir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Get(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.PutByGuid(System.String,System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.ChangeDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.RemoveDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.SendCommand(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="strCommand">命令</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg,应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.CreateDataSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPClient.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.RemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.UserName">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.Password">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPClient.Connected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.FTPClient.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.FTPConfig">
            <summary>
            获取FTP配置文件的内容
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPConfig.#ctor(System.String)">
            <summary>
            获取FTP配置文件的内容
            </summary>
            <param name="xmlFileName"></param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPConfig.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPConfig.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPConfig.UserName">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPConfig.Password">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.FTPWeb">
            <summary>
            FTP文件传输
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="remoteHost"></param>
            <param name="remotePort"></param>
            <param name="remotePath"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.#ctor(ThinkNet.Infrastructure.Core.FTPConfig,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ftpConfig"></param>
            <param name="remotePath"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.ExistDirectory(System.String)">
            <summary>
            判断当前目录下指定的子目录是否存在
            </summary>
            <param name="strDirName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.DirDirectorys">
            <summary>
            获取当前目录下所有的文件夹列表(仅文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.DirDirectoryFiles">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Dir(System.String)">
            <summary>
            获得文件列表(仅文件)
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.ExistFile(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在
            </summary>
            <param name="strRemoteFileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Get(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.GetString(System.String)">
            <summary>
            下载一个文件的内容(字符串)
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <returns>返回文件内容</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.GetByte(System.String)">
            <summary>
            下载一个文件的内容(字节)
            </summary>
            <param name="strRemoteFileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名(包含路径)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.PutStream(System.String,System.IO.Stream)">
            <summary>
            上传一个文件(文件流)
            </summary>
            <param name="strFileName">本地文件名(不包含路径)</param>
            <param name="fileStream">文件流</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.PutByte(System.String,System.Byte[])">
            <summary>
            上传一个文件(字节)
            </summary>
            <param name="strFileName">本地文件名(不包含路径)</param>
            <param name="bytes">文件字节</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.PutString(System.String,System.String)">
            <summary>
            上传一个文件(字符串)
            </summary>
            <param name="strFileName">本地文件名(不包含路径)</param>
            <param name="content">字符串内容</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.ChangeDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.CreateDirMore(System.String)">
            <summary>
            创建目录(多级)
            </summary>
            <param name="strDirNameMore">要创建的目录(多级)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.FTPWeb.RemoveDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.RemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.UserName">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.Password">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.FTPWeb.FtpURI">
            <summary>
            FTP请求路径
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ColumnInfo">
            <summary>
            数据列对象
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ColumnInfo.ErrorMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ColumnInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ColumnInfo.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="type">数据类型</param>
            <param name="description">描述</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ColumnInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="type">数据类型</param>
            <param name="length">长度</param>
            <param name="description">描述</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.VerificationType">
            <summary>
            数据列验证类型
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.DataType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.RowIndex">
            <summary>
            行位置
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.Length">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.ColumnName">
            <summary>
            列对应的表字段名
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.Description">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.DataValue">
            <summary>
            有效值
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.OriginalValue">
            <summary>
            原始值
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.OtherValue">
            <summary>
            其他值
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.Unique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.ColumnNumber">
            <summary>
            数据所在的列号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ColumnInfo.ListWidth">
            <summary>
            列宽
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ExcelLibraryHandler">
            <summary>
            继承此类只要重写一下以下方法即可：
            ValidData：验证数据是否合格
            ImportToTargetTable：导入数据到对应的表中
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.IsExistError(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.IsColumnValid(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.SourceToTempTable(System.String)">
            <summary>
            读取Excel，然后写入临时表、启动数据验证、显示数据验证结果
            </summary>
            <param name="filePath">Excel文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ValidData(ThinkNet.Infrastructure.Core.ColumnInfo)">
            <summary>
            数据验证
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ImportToTempTable(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.RowInfo})">
            <summary>
            导入临时表
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ModifyDataInTempTable(System.Int32,System.String,System.Object)">
            <summary>
            修改临时表中数据
            </summary>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ModifyDataInTempTableOther(System.Int32,System.String,System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="dataValue"></param>
            <param name="otherColumnName"></param>
            <param name="otherDataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ModifyDataByOriginalValue(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="oldDataValue"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ModifyDataByOriginalValueOther(System.String,System.Object,System.Object,System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="originalValue"></param>
            <param name="dataValue"></param>
            <param name="otherColumnName"></param>
            <param name="otherOriginalValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ModifyDataValueByOriginalValue(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="originalValue"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.DeleteRowInTempTable(System.Int32)">
            <summary>
            删除临时表中的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ImportToTargetTable(System.Int32,System.String)">
            <summary>
            导入到实际表中
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.ClearHandleRows">
            <summary>
            清空已经处理的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IImportHandler.RemoveTempTableByUnquieKey(System.String)">
            <summary>
            删除缓存数据
            </summary>
            <param name="unquieKey"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.IImportHandler.UnquieKey">
            <summary>
            唯一Key值
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.IImportHandler.DataCollection">
            <summary>
            临时数据
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.IImportHandler.IsAllValid">
            <summary>
            是否所有数据都是通过校验
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.CachePool">
            <summary>
            内存数据
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.DataTableHeader">
            <summary>
            导入模板结构Xml对象，根节目
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.SaveDataCollection">
            <summary>
            将修改后的数据保存到缓存中去
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.IsExistError(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.IsColumnValid(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="schemaPath"></param>
            <param name="unquieKey"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="schemaPath"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.GetTableSchema(System.String)">
            <summary>
            获取导入表定义结构 主要用与客户端解释表结构
            </summary>
            <param name="tableSchemaPath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.GetTableSchemaToColumnInfo(System.String)">
            <summary>
            获取导入表定义结构 主要用与客户端解释表结构
            </summary>
            <param name="tableSchemaPath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.GetColumnInfo(System.String)">
            <summary>
            通过列名获取列临时数据对象
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.GetColumnInfo(System.Int32)">
            <summary>
            通过列顺序号获取列临时数据对象
            </summary>
            <param name="columnNo"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.GetTmpDataByUnquieKey(System.String)">
            <summary>
            根据unquieKey，获取临时表中的数据
            </summary>
            <param name="unquieKey"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.ValidData(ThinkNet.Infrastructure.Core.ColumnInfo)">
            <summary>
            验证数据是否合格
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.FormatDecimalPrecision(System.String,System.Int32)">
            <summary>
            控制小数位数,不足补0，多的截取
            </summary>
            <param name="value">原始值</param>
            <param name="precisionLength">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.SourceToTempTable(System.String)">
            <summary>
            读取Excel，然后写入临时表、启动数据验证、显示数据验证结果
            <param name="filePath">Excel文件路径</param>
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.ImportToTempTable(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.RowInfo})">
            <summary>
            导入数据到临时表
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.ModifyDataInTempTable(System.Int32,System.String,System.Object)">
            <summary>
            修改要导入的数据
            </summary>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.DeleteRowInTempTable(System.Int32)">
            <summary>
            删除临时表中的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.ImportToTargetTable(System.Int32,System.String)">
            <summary>
            导入数据到对应的表中
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.ClearHandleRows">
            <summary>
            删除临时表中对应的数据
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.RemoveTempTableByUnquieKey(System.String)">
            <summary>
            删除缓存数据
            </summary>
            <param name="unquieKey"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.UnquieKey">
            <summary>
            缓存中的Key
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.DataTableSchema">
            <summary>
            导入模板结构Xml对象
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.DataCollection">
            <summary>
            当前的临时数据
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.TableName">
            <summary>
            目标表名
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.KeyColumn">
            <summary>
            目标表的主健
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ExcelLibraryHandler.DataStartRow">
            <summary>
            数据源中的开始行
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.NPOIHandler">
            <summary>
            继承此类只要重写一下以下方法即可：
            ValidData：验证数据是否合格
            ImportToTargetTable：导入数据到对应的表中
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.NPOIHandler.CachePool">
            <summary>
            内存数据
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.NPOIHandler.DataTableHeader">
            <summary>
            导入模板结构Xml对象，根节目
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.SaveDataCollection">
            <summary>
            将修改后的数据保存到缓存中去
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.IsExistError(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.IsColumnValid(System.String)">
            <summary>
            针对快速导入
            </summary>
            <param name="columns">逗号分隔的列(可为空)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="schemaPath"></param>
            <param name="unquieKey"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="schemaPath"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.GetTableSchema(System.String)">
            <summary>
            获取导入表定义结构 主要用与客户端解释表结构
            </summary>
            <param name="tableSchemaPath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.GetTableSchemaToColumnInfo(System.String)">
            <summary>
            获取导入表定义结构 主要用与客户端解释表结构
            </summary>
            <param name="tableSchemaPath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.GetColumnInfo(System.String)">
            <summary>
            通过列名获取列临时数据对象
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.GetColumnInfo(System.Int32)">
            <summary>
            通过列顺序号获取列临时数据对象
            </summary>
            <param name="columnNo"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.GetTmpDataByUnquieKey(System.String)">
            <summary>
            根据unquieKey，获取临时表中的数据
            </summary>
            <param name="unquieKey"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.ValidData(ThinkNet.Infrastructure.Core.ColumnInfo)">
            <summary>
            验证数据是否合格
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.FormatDecimalPrecision(System.String,System.Int32)">
            <summary>
            控制小数位数,不足补0，多的截取
            </summary>
            <param name="value">原始值</param>
            <param name="precisionLength">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.SourceToTempTable(System.String)">
            <summary>
            读取Excel，然后写入临时表、启动数据验证、显示数据验证结果
            <param name="filePath">Excel文件路径</param>
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.ImportToTempTable(System.Collections.Generic.List{ThinkNet.Infrastructure.Core.RowInfo})">
            <summary>
            导入数据到临时表
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.ModifyDataInTempTable(System.Int32,System.String,System.Object)">
            <summary>
            修改要导入的数据
            </summary>
            <param name="rowIndex"></param>
            <param name="columnName"></param>
            <param name="dataValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.DeleteRowInTempTable(System.Int32)">
            <summary>
            删除临时表中的行
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.ImportToTargetTable(System.Int32,System.String)">
            <summary>
            导入数据到对应的表中
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.ClearHandleRows">
            <summary>
            删除临时表中对应的数据
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.NPOIHandler.RemoveTempTableByUnquieKey(System.String)">
            <summary>
            删除缓存数据
            </summary>
            <param name="unquieKey"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.UnquieKey">
            <summary>
            缓存中的Key
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.DataTableSchema">
            <summary>
            导入模板结构Xml对象
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.DataCollection">
            <summary>
            当前的临时数据
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.TableName">
            <summary>
            目标表名
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.KeyColumn">
            <summary>
            目标表的主健
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.NPOIHandler.DataStartRow">
            <summary>
            数据源中的开始行
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.RowInfo">
            <summary>
            数据行对象
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RowInfo.#ctor">
            <summary>
            数据行对象
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.RowIndex">
            <summary>
            数据行号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.Columns">
            <summary>
            数据列
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.IsHandle">
            <summary>
            是否已经处理了(写入目标表)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.HandleError">
            <summary>
            行处理错误提示
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.IsValid">
            <summary>
            行是否有效
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.IsRepeat">
            <summary>
            行是重复的
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.IsError">
            <summary>
            行是错误的
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RowInfo.IsNotPass">
            <summary>
            行是验证不通过的
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.VerificationTypes">
            <summary>
            数据列验证类型(枚举)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.Correct">
            <summary>
            正确
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.Repeat">
            <summary>
            重复
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.NotExist">
            <summary>
            不存在
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.MultiExist">
            <summary>
            存在多个
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.Exist">
            <summary>
            存在
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.VerificationTypes.NotExistExt">
            <summary>
            不存在(自动创建)
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.Message.AttachmentInfo">
            <summary>
            附件信息
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.fileName">
            <summary>
            附件的文件名 [如果输入路径，则自动转换为文件名]
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.bytes">
            <summary>
            附件的内容 [由经Base64编码的字节组成]
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.#ctor(System.String,System.IO.Stream)">
            <summary>
            从流中读取附件内容并构造
            </summary>
            <param name="ifileName">附件的文件名</param>
            <param name="stream">流</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.#ctor(System.String,System.Byte[])">
            <summary>
            按照给定的字节构造附件
            </summary>
            <param name="ifileName">附件的文件名</param>
            <param name="ibytes">附件的内容 [字节]</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.#ctor(System.String)">
            <summary>
            从文件载入并构造
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.FileName">
            <summary>
            附件的文件名 [如果输入路径，则自动转换为文件名]
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.Message.AttachmentInfo.Bytes">
            <summary>
            附件的内容 [由经Base64编码的字节组成]
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.EmailHandler">
            <summary>
            邮件处理类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IMessageHandler.Send">
            <summary>
            发送
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="smtpServer">发件服务器</param>
            <param name="sendEmailAddress">发件邮箱地址</param>
            <param name="sendUserName">发件用户名称</param>
            <param name="sendUserPassword">发件用户密码</param>
            <param name="emailTo">收件人邮箱地址</param>
            <param name="title">主题</param>
            <param name="content">内容</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.Send">
            <summary>
            发送
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.Connect">
            <summary>
            连接发件服务器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.Connect(System.String)">
            <summary>
            连接发件服务器
            </summary>
            <param name="smtpServer">发件服务器</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.SetEmailFrom(System.String)">
            <summary>
            设置发件人邮箱地址
            </summary>
            <param name="emailFrom">发件人邮箱地址</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailTo(System.String)">
            <summary>
            添加收件人邮箱地址
            </summary>
            <param name="emailTo">收件人邮箱地址</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailTo(System.String[])">
            <summary>
            添加收件人邮箱地址
            </summary>
            <param name="arrEmailTo">收件人邮箱地址集合</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailCC(System.String)">
            <summary>
            添加抄送邮箱地址
            </summary>
            <param name="emailCc">抄送邮箱地址</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailCC(System.String[])">
            <summary>
            添加抄送邮箱地址
            </summary>
            <param name="arrEmailCc">抄送邮箱地址集合</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailBcc(System.String)">
            <summary>
            添加密件抄送邮箱地址
            </summary>
            <param name="emailBcc">密件抄送邮箱地址</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddEmailBcc(System.String[])">
            <summary>
            添加密件抄送邮箱地址
            </summary>
            <param name="arrEmailBcc">密件抄送邮箱地址集合</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddAttachment(System.String)">
            <summary>
            添加附件
            </summary>
            <param name="filePath">附件路径</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.AddAttachment(System.String[])">
            <summary>
            添加附件
            </summary>
            <param name="arrFilePath">附件路径集合</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.SetSubject(System.String)">
            <summary>
            设置邮件主题
            </summary>
            <param name="subject">邮件主题</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.EmailHandler.SetBody(System.String)">
            <summary>
            设置邮件内容
            </summary>
            <param name="body">邮件内容</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendMail(System.String,System.String,System.String)">
            <summary>
            发送
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailAdmin(System.String,System.String,System.String)">
            <summary>
            发送邮件（发件人为邮件管理员）
            </summary>
            <param name="MailTo">收件人信箱（ea@sohu.com,ea@163.com,,,可以逗号隔开发送给多个信箱）</param>
            <param name="Subject">标题</param>
            <param name="Body">内容</param>
            <param name="strErr">错误信息</param>
            <returns>发送是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailCustom(System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件（发件人自定义）
            </summary>
            <param name="MailFrom">发件人信箱</param>
            <param name="MailTo">收件人信箱（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject">标题</param>
            <param name="Body">内容</param>
            <param name="strErr">错误信息</param>
            <returns>发送是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailCopyTo(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件，可以抄送给其他人
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailCopyToAndDarkTo(System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailCopyToAndDarkTo(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailCopyToAndDarkTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailTo"></param>
            <param name="SendType">1.普通2.抄送3.密送</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailAttachment(System.String,System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            发送带附件的邮件
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo"></param>
            <param name="BCCTo"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="AttachUrls">附件路径列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.IMailHandler.SendEmailAttachment(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            发送带附件的邮件
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo"></param>
            <param name="BCCTo"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="AttachUrls">附件路径列表</param>
            <returns></returns>
        </member>
        <member name="M:SendMail.MailSender.Send">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="M:SendMail.MailSender.WriteString(System.Net.Sockets.NetworkStream,System.String)">
            <summary>
            向流中写入字符
            </summary>
            <param name="netStream">来自TcpClient的流</param>
            <param name="str">写入的字符</param>
        </member>
        <member name="M:SendMail.MailSender.ReadString(System.Net.Sockets.NetworkStream)">
            <summary>
            从流中读取字符
            </summary>
            <param name="netStream">来自TcpClient的流</param>
            <returns>读取的字符</returns>
        </member>
        <member name="M:SendMail.MailSender.Command(System.Net.Sockets.NetworkStream,System.String,System.String)">
            <summary>
            发出命令并判断返回信息是否正确
            </summary>
            <param name="netStream">来自TcpClient的流</param>
            <param name="command">命令</param>
            <param name="state">正确的状态码</param>
            <returns>是否正确</returns>
        </member>
        <member name="M:SendMail.MailSender.ToBase64(System.String)">
            <summary>
            字符串编码为Base64
            </summary>
            <param name="str">字符串</param>
            <returns>Base64编码的字符串</returns>
        </member>
        <member name="P:SendMail.MailSender.Server">
            <summary>
            SMTP服务器域名
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Port">
            <summary>
            SMTP服务器端口 [默认为25]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.UserName">
            <summary>
            用户名 [如果需要身份验证的话]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Password">
            <summary>
            密码 [如果需要身份验证的话]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:SendMail.MailSender.To">
            <summary>
            收件人地址
            </summary>
        </member>
        <member name="P:SendMail.MailSender.FromName">
            <summary>
            发件人姓名
            </summary>
        </member>
        <member name="P:SendMail.MailSender.ToName">
            <summary>
            收件人姓名
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Subject">
            <summary>
            邮件的主题
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Body">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:SendMail.MailSender.HtmlBody">
            <summary>
            超文本格式的邮件正文
            </summary>
        </member>
        <member name="P:SendMail.MailSender.IsHtml">
            <summary>
            是否是html格式的邮件
            </summary>
        </member>
        <member name="P:SendMail.MailSender.LanguageEncoding">
            <summary>
            语言编码 [默认为GB2312]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.MailEncoding">
            <summary>
            邮件编码 [默认为8bit]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Priority">
            <summary>
            邮件优先级 [默认为3]
            </summary>
        </member>
        <member name="P:SendMail.MailSender.Attachments">
            <summary>
            附件 [AttachmentInfo]
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailAdmin(System.String,System.String,System.String)">
            <summary>
            发送邮件（发件人为邮件管理员）
            </summary>
            <param name="MailTo">收件人信箱（ea@sohu.com,ea@163.com,,,可以逗号隔开发送给多个信箱）</param>
            <param name="Subject">标题</param>
            <param name="Body">内容</param>
            <param name="strErr">错误信息</param>
            <returns>发送是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailCustom(System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件（发件人自定义）
            </summary>
            <param name="MailFrom">发件人信箱</param>
            <param name="MailTo">收件人信箱（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject">标题</param>
            <param name="Body">内容</param>
            <param name="strErr">错误信息</param>
            <returns>发送是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailCopyTo(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件，可以抄送给其他人
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailCopyToAndDarkTo(System.String,System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailCopyToAndDarkTo(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailTo"></param>
            <param name="CCTo">抄送给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="BCCTo">暗抄给谁（ea@21cn.com,ea@sohu.com,,,）</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailCopyToAndDarkTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            发送邮件，可以抄送、暗送给其他人
            </summary>
            <param name="MailTo"></param>
            <param name="SendType">1.普通2.抄送3.密送</param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailAttachment(System.String,System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            发送带附件的邮件
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo"></param>
            <param name="BCCTo"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="AttachUrls">附件路径列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendEmailAttachment(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.ArrayList)">
            <summary>
            发送带附件的邮件
            </summary>
            <param name="MailFrom"></param>
            <param name="MailTo"></param>
            <param name="CCTo"></param>
            <param name="BCCTo"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="AttachUrls">附件路径列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.Message.SendMailMethod.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="MailTo">收件人信箱</param>
            <param name="Subject">标题</param>
            <param name="Body">内容</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SMSHandler">
            <summary>
            短信处理类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SMSHandler.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="smsApiServer">发信服务器(url接口)</param>
            <param name="sendSmsAccount">发信账号名称</param>
            <param name="sendSmsPassword">发信账号密码</param>
            <param name="mobileTo">收信人手机号码</param>
            <param name="content">内容</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SMSHandler.Send">
            <summary>
            发送
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.RunningInstance">
            <summary>
            运行控制
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.GetRunningInstance">
            <summary>
            获取应用程序进程实例,如果没有匹配进程，返回Null
            </summary>
            <returns>返回当前Process实例</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.IsRunningInstance">
            <summary>
            是否运行实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.ShowRunningInstance">
            <summary>
            显示已运行的例程
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.CreateMutex">
            <summary>
            创建应用程序进程Mutex
            </summary>
            <returns>返回创建结果，true表示创建成功，false创建失败。</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.CreateMutex(System.String)">
            <summary>
            创建应用程序进程Mutex
            </summary>
            <param name="name">Mutex名称</param>
            <returns>返回创建结果，true表示创建成功，false创建失败。</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.ReleaseMutex">
            <summary>
            释放Mutex
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.InitRunFlag">
            <summary>
            初始化程序运行标志，如果设置成功，返回true，已经设置返回false，设置失败将抛出异常
            </summary>
            <returns>返回设置结果</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.RunningInstance.DisposeRunFlag">
            <summary>
            释放初始化程序运行标志，如果释放失败将抛出异常
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.RunningInstance.RunFlag">
            <summary>
            获取或设置程序运行标志，必须符合Windows文件命名规范
            这里实现生成临时文件为依据，如果修改成设置注册表，那就不需要符合文件命名规范。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ServiceResult">
            <summary>
            服务结果描述
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ServiceResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ServiceResult.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="result"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ServiceResult.ToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Json字符串
            </summary>
            <param name="elseArgs">其它需要一同生成Json的键值对</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ServiceResult.ToString">
            <summary>
            Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ServiceResult.Result">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ServiceResult.Message">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ServiceResult.Data">
            <summary>
            数据对象
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ApiResult`1">
            <summary>
            Json数据结果描述
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ApiResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ApiResult`1.#ctor(System.Int32,`0)">
            <summary>
            构造函数
            </summary>
            <param name="code">错误码</param>
            <param name="data">数据</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ApiResult`1.#ctor(System.Int32,System.String,`0)">
            <summary>
            构造函数
            </summary>
            <param name="code">错误码</param>
            <param name="msg"></param>
            <param name="data">数据</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ApiResult`1.code">
            <summary>
            错误码
            200：正常 400：错误
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ApiResult`1.msg">
            <summary>
            服务端 设置返回的错误提示，免得每次更新APP
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ApiResult`1.data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SimpleJsonDate">
            <summary>
            Json数据结果描述
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleJsonDate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleJsonDate.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="r"></param>
            <param name="m"></param>
            <param name="d"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleJsonDate.ToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Json字符串
            </summary>
            <param name="elseArgs">其它需要一同生成Json的键值对</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleJsonDate.ToString">
            <summary>
            Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleJsonDate.ClaerJsonDate">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleJsonDate.r">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleJsonDate.m">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleJsonDate.d">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SimpleResult">
            <summary>
            简单结果描述
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleResult.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="result"></param>
            <param name="message"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleResult.ToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Json字符串
            </summary>
            <param name="elseArgs">其它需要一同生成Json的键值对</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.SimpleResult.ToString">
            <summary>
            Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleResult.Result">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleResult.Message">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.Singleton`1">
            <summary>
            单例模式，泛型构建Singleton模式(需要使用该模式的类,只需要从此类继承即可)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.CallSimpleWrap">
            <summary>
            Socket调用的简单包装
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallSimpleWrap._simpleType">
            <summary>
            简单标识
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallSimpleWrap._simpleMessage">
            <summary>
            简单信息
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallSimpleWrap.SimpleType">
            <summary>
            简单标识
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallSimpleWrap.SimpleMessage">
            <summary>
            简单信息
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.CallResult">
            <summary>
            Socket调用的结果
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.CallResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.CallResult.#ctor(System.Int32,System.String,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="code"></param>
            <param name="codeEx"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.CallResult.SetCallResult(System.Int32,System.String,System.String,System.Object)">
            <summary>
            设置信息提示
            </summary>
            <param name="code"></param>
            <param name="codeEx"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallResult.ResultCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallResult.ResultCodeEx">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallResult.ResultMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallResult.ResultData">
            <summary>
            比如输出参数 多个可以采用数组或字典形式
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.CallWrap">
            <summary>
            Socket调用的包装
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallWrap._cmdCls">
            <summary>
            调用的类
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallWrap._cmdName">
            <summary>
            调用的方法
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallWrap._params">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.CallWrap._connectionStringName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallWrap.CommandCls">
            <summary>
            调用的类
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallWrap.CommandName">
            <summary>
            调用的方法
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallWrap.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.CallWrap.ConnectionStringName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.EntityWrap`1">
            <summary>
            Socket调用的结果(查询包装)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SocketDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes">
            <summary>
            结果编号集
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.SUCCESS">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.FAIL">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.LOGIN">
            <summary>
            登陆异常
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.AUTHORIZATION">
            <summary>
            授权异常
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.NOTEXISTS">
            <summary>
            不存在
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.NULL">
            <summary>
            实体NULL
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.ResultCodes.EXCEPTION">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SocketDictionary.SimpleTypes">
            <summary>
            简单标识集
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.SimpleTypes.BroadCast">
            <summary>
            广播
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SocketDictionary.SimpleTypes.ServerOpenOrClose">
            <summary>
            打开或关闭服务端的服务
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.GenerateScripts">
            <summary>
            创建脚本工具类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            数据库操作类
            </summary>
            <param name="server"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="database"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.SetDatabase(System.String,System.String)">
            <summary>
            设置数据库
            </summary>
            <param name="database"></param>
            <param name="scriptType"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.GenerateTableScripts(System.String)">
            <summary>
            生成表脚本
            </summary>
            <param name="tables">数据源表</param>
            <param name="fileName">文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.GertateFunctionScripts(System.String)">
            <summary>
            生成函数脚本
            </summary>
            <param name="funs">函数</param>
            <param name="fileName">文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.GenerateViewScripts(System.String)">
            <summary>
            生成视图
            </summary>
            <param name="views">视图</param>
            <param name="fileName">文件名路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.GenerateProcScripts(System.String)">
            <summary>
            生成存储过程
            </summary>
            <param name="proc">存储过程</param>
            <param name="fileName">文件路径</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.GenerateScripts.GetScripter(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            配置
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.GenerateScripts.Connection">
            <summary>
            Connection
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.GenerateScripts.DataBase">
            <summary>
            数据源
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ExecuteTypes">
            <summary>
            执行类型
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ExecuteTypes.Continue">
            <summary>
            持续执行
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ExecuteTypes.Timer">
            <summary>
            定时执行
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.TimerTypes">
            <summary>
            定时执行类型
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.TimerTypes.Day">
            <summary>
            每天
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.TimerTypes.Month">
            <summary>
            每月
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.TimerTypes.Week">
            <summary>
            每周
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.IThreadExecuteService">
            <summary>
            线程执行服务接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IThreadExecuteService.Execute">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.IThreadExecuteService.ExecuteOnce(System.Object,System.String)">
            <summary>
            执行一次
            </summary>
            <param name="parameter">参数对象</param>
            <param name="connectionStringName">数据库连接</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.IThreadExecuteService.ThreadID">
            <summary>
            线程ID号
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.SimpleThread">
            <summary>
            简单线程描述
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ThreadCode">
            <summary>
            线程编号
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ThreadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ThreadType">
            <summary>
            线程类型
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._RunTimes">
            <summary>
            运行时间
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._RemainTime">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._IgnoreCount">
            <summary>
            忽略数
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._SucceedCount">
            <summary>
            成功数
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._FailedCount">
            <summary>
            失败数
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._PriorityName">
            <summary>
            优先级名称(如:普通)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._StatusName">
            <summary>
            状态名称(如:运行,停止)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._Status">
            <summary>
            状态(如:1-运行,2-停止)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._Message">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._objThread">
            <summary>
            线程(System.Threading.Thread)的实例
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._objThreadExecuteService">
            <summary>
            线程执行实例
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ExecuteType">
            <summary>
            执行类型(0-持续执行,1-定时执行)
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._TimerType">
            <summary>
            定时类型(0-每天,1-每月)
            </summary>
        </member>
        <!-- 对于成员“F:ThinkNet.Infrastructure.Core.SimpleThread._Time”忽略有格式错误的 XML 注释 -->
        <member name="F:ThinkNet.Infrastructure.Core.SimpleThread._ConnectionStringName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ThreadCode">
            <summary>
            线程编号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ThreadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ThreadType">
            <summary>
            线程类型
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.RunTimes">
            <summary>
            运行时间
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.RemainTime">
            <summary>
            剩余时间
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.IgnoreCount">
            <summary>
            忽略数
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.SucceedCount">
            <summary>
            成功数
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.FailedCount">
            <summary>
            失败数
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.PriorityName">
            <summary>
            优先级名称(如:普通)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.StatusName">
            <summary>
            状态名称(如:运行,停止)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.Status">
            <summary>
            状态(如:1-运行,2-停止)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.Message">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ObjThread">
            <summary>
            线程(System.Threading.Thread)的实例
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ObjThreadExecuteService">
            <summary>
            线程执行实例
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ExecuteType">
            <summary>
            执行类型(0-持续执行,1-定时执行)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.TimerType">
            <summary>
            定时类型(0-每天,1-每月,2-每周)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.Time">
            <summary>
            ExecuteType如果是Continue,该值是间隔执行时间,单位秒
            ExecuteType如果是timer,该值是定时执行的时间(如果TimerType是Day,该值是小时:分钟,如果TimerType是Month,该值是日-小时:分钟,如果TimerType是Week,该值是星期-小时:分钟)
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.SimpleThread.ConnectionStringName">
            <summary>
            数据库连接名称
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ThreadHandler">
            <summary>
            线程处理类
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadHandler._SimpleThreadPool">
            <summary>
            简单线程池
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.GetThread(System.Int32)">
            <summary>
            根据线程ID获取对应的线程实列
            </summary>
            <param name="id">线程ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.AddThread(System.String)">
            <summary>
            往线程池里添加线程
            </summary>
            <param name="threadName">线程名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.AddThreadObject(System.String)">
            <summary>
            往线程池里添加线程
            </summary>
            <param name="threadName">线程名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.Remove(System.Int32)">
            <summary>
            根据线程ID删除对应的线程实列
            </summary>
            <param name="id">线程ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.LoadThreadFromXml(System.String)">
            <summary>
            加载xml文件中的线程配置到线程池中
            </summary>
            <param name="xmlFileName">xml文件的全路径(包含文件名称)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.LoadThreadFromDatabase(System.String,System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            加载数据库中的线程配置到线程池中
            </summary>
            <param name="connectionStringName">数据连接名称</param>
            <param name="collenctions">线程集合</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadHandler.LoadThreadFromDatabase(System.String,System.Data.DataTable)">
            <summary>
            加载数据库中的线程配置到线程池中
            </summary>
            <param name="connectionStringName">数据连接名称</param>
            <param name="dtData">线程集合</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadHandler.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadHandler.ThreadList">
            <summary>
            线程列表
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ThreadStates">
            <summary>
            线程状态枚举
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadStates.Running">
            <summary>
            运行
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadStates.Stopped">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.WebServiceUrlConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.WebServiceUrlConfig.GetWebServiceUrl(System.String,System.String)">
            <summary>
            获取WebService的Url地址
            </summary>
            <param name="xmlFileName">WebService配置文件</param>
            <param name="webServiceUrl">WebServiceUrl名称</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Persistence.Core.IDAO`1">
            <summary>
            数据(持久化)访问对象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Add(System.Collections.Generic.List{`0})">
            <summary>
            添加
            </summary>
            <param name="list">数据实体列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新
            </summary>
            <param name="list">数据实体列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Update(`0,System.String)">
            <summary>
            更新
            </summary>
            <param name="dataEntity">数据实体</param>
            <param name="columns">字段(逗号分隔)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Delete(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Delete(System.Int64)">
            <summary>
            删除
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Delete(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            删除
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Exists(System.Int32)">
            <summary>
            是否存在
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Exists(System.Int64)">
            <summary>
            是否存在
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.Exists(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            是否存在
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetCount(System.String)">
            <summary>
            获取记录数
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetCount(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            获取记录数
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.Int32)">
            <summary>
            获取数据实体
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.Int64)">
            <summary>
            获取数据实体
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.String)">
            <summary>
            获取数据实体
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            获取数据实体
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.Data.DataRow)">
            <summary>
            获取数据实体
            </summary>
            <param name="row">数据行</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataEntity(System.Data.IDataReader)">
            <summary>
            获取数据实体
            </summary>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetReader(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据流
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetDataTable(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据集合
            </summary>
            <returns></returns>
            <param name="mPager">分页参数</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetList(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据实体列表
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetList(System.Data.IDataReader)">
            <summary>
            获取数据实体列表
            </summary>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetPagerDataReader(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取分页的数据流
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.GetPagerDataTable(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取分页的数据集合
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAO`1.BuildSql(ThinkNet.Persistence.Core.Pager)">
            <summary>
            构建SQL语句
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.ConnName">
            <summary>
            数据库连接字符串名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.PrimaryKey">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.IsExternalConnection">
            <summary>
            是否外部设置数据库
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IDAO`1.MaxID">
            <summary>
            最大ID值
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAOExtentions.Add``1(ThinkNet.Persistence.Core.IDAO{``0},``0)">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisDAO"></param>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAOExtentions.Update``1(ThinkNet.Persistence.Core.IDAO{``0},``0)">
            <summary>
            更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisDAO"></param>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAOExtentions.Update``1(ThinkNet.Persistence.Core.IDAO{``0},``0,System.String)">
            <summary>
            更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisDAO"></param>
            <param name="dataEntity">数据实体</param>
            <param name="columns">字段(逗号分隔)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IDAOExtentions.Delete``1(ThinkNet.Persistence.Core.IDAO{``0},``0)">
            <summary>
            删除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisDAO"></param>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Persistence.Core.SQLDAOBase`1">
            <summary>
            数据(持久化)访问对象的抽象基类(基于SQLServer)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ThinkNet.Persistence.Core.SQLDAOBase`1._t">
            <summary>
            数据实体
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.SQLDAOBase`1._ConnName">
            <summary>
            数据库连接字符串名称
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.SQLDAOBase`1._PrimaryKey">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.SQLDAOBase`1._TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Add(System.Collections.Generic.List{`0})">
            <summary>
            添加
            </summary>
            <param name="dataEntity">数据实体列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            更新
            </summary>
            <param name="dataEntity">数据实体列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Update(`0,System.String)">
            <summary>
            更新
            </summary>
            <param name="dataEntity">数据实体</param>
            <param name="columns">字段(逗号分隔)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="dataEntity">数据实体</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Delete(System.Int32)">
            <summary>
            删除
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Delete(System.Int64)">
            <summary>
            删除
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Delete(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            删除
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Exists(System.Int32)">
            <summary>
            是否存在
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Exists(System.Int64)">
            <summary>
            是否存在
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Exists(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.Exists(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            是否存在
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetCount(System.String)">
            <summary>
            获取记录数
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetCount(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            获取记录数
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.Int32)">
            <summary>
            获取数据实体
            </summary>
            <param name="id">主键值(整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.Int64)">
            <summary>
            获取数据实体
            </summary>
            <param name="id">主键值(长整型)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.String)">
            <summary>
            获取数据实体
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.String,System.Collections.Generic.List{ThinkNet.Persistence.Core.Parameter})">
            <summary>
            获取数据实体
            </summary>
            <param name="where">where条件</param>
            <param name="listParameter">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.Data.DataRow)">
            <summary>
            获取数据实体
            </summary>
            <param name="row">数据行</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataEntity(System.Data.IDataReader)">
            <summary>
            获取数据实体
            </summary>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetReader(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据流
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetDataTable(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据集合
            </summary>
            <returns></returns>
            <param name="mPager">分页参数</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetList(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取数据实体列表
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetList(System.Data.IDataReader)">
            <summary>
            获取数据实体列表
            </summary>
            <param name="reader">数据流</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetPagerDataReader(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取分页的数据流
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetPagerDataTable(ThinkNet.Persistence.Core.Pager)">
            <summary>
            获取分页的数据集合
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.BuildSql(ThinkNet.Persistence.Core.Pager)">
            <summary>
            构建SQL语句
            </summary>
            <param name="mPager">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetNonUnderlineAndKeyProperties">
            <summary>
            获取数据实体的属性(剔除带下划线(_)的公共属性、剔除实体对象主键是自增的主键属性)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetNonUnderlineProperties(`0)">
            <summary>
            获取数据实体的属性(剔除带下划线(_)的公共属性)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SQLDAOBase`1.GetProperties">
            <summary>
            获取数据实体的属性
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.t">
            <summary>
            数据实体
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.ConnName">
            <summary>
            数据库连接字符串名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.PrimaryKey">
            <summary>
            主键名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.IsExternalConnection">
            <summary>
            是否外部设置数据库
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SQLDAOBase`1.MaxID">
            <summary>
            最大ID值
            </summary>
        </member>
        <member name="T:ThinkNet.Persistence.Core.IPager">
            <summary>
            分页参数类接口
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IPager.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页的Sql语句
            </summary>
            <param name="strSql">未分页的sql语句</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.IPager.GetCountSql(System.String)">
            <summary>
            获取分页的Sql语句的总记录数
            </summary>
            <param name="strSql"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.Where">
            <summary>
            where条件(可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.PageIndex">
            <summary>
            当前页数(-1或0均转为1)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.PageSize">
            <summary>
            每页显示记录数(-1或0均转为int.MaxValue)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.OrderType">
            <summary>
            排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.Columns">
            <summary>
            字段名称(逗号分隔,可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.OrderField">
            <summary>
            排序字段(注:可以直接加上DESC/ASC,可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.IPager.TableName">
            <summary>
            数据表名称(可为空)
            </summary>
        </member>
        <member name="T:ThinkNet.Persistence.Core.Pager">
            <summary>
            分页参数类
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.where">
            <summary>
            where条件
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.pageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.pageSize">
            <summary>
            每页显示记录数
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.orderType">
            <summary>
            排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.columns">
            <summary>
            字段名称(逗号分隔)
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.orderField">
            <summary>
            排序字段(注:可以直接加上DESC/ASC)
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Pager.tableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor">
            <summary>
            分页参数类(查询参数)
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔,可为空)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔,可为空)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC,可为空)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.#ctor(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            分页参数类(查询参数)
            </summary>
            <param name="where">where条件(可为空)</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔,可为空)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC,可为空)</param>
            <param name="tableName">数据表名称(可为空)</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取SqlServer(2005版本及以上)数据库的分页Sql语句
            </summary>
            <param name="strSql">未分页的Sql语句</param>
            <param name="pageIndex">当前页数(-1或0均转为1)</param>
            <param name="pageSize">每页显示记录数(-1或0均转为int.MaxValue)</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.Pager.GetCountSql(System.String)">
            <summary>
            获取分页Sql语句的总记录数
            </summary>
            <param name="strSql">未分页的Sql语句</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.Where">
            <summary>
            where条件(可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.PageIndex">
            <summary>
            当前页数(-1或0均转为1)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.PageSize">
            <summary>
            每页显示记录数(-1或0均转为int.MaxValue)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.OrderType">
            <summary>
            排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.Columns">
            <summary>
            字段名称(逗号分隔,可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.OrderField">
            <summary>
            排序字段(注:可以直接加上DESC/ASC,可为空)
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Pager.TableName">
            <summary>
            数据表名称(可为空)
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Parameter._ParameterDbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Parameter._ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.Parameter._ParameterValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Parameter.ParameterDbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Parameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.Parameter.ParameterValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:ThinkNet.Persistence.Core.SqlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThinkNet.Persistence.Core.SqlHelper._ConnName">
            <summary>
            数据库连接字符串名称
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connName">数据库连接字符串名称</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(ThinkNet.Persistence.Core.SqlInfo,System.String)">
            <summary>
            执行命令
            </summary>
            <param name="mSqlInfo">SqlHelper信息对象</param>
            <param name="connName">数据库连接字符串名称</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(ThinkNet.Persistence.Core.SqlInfo)">
            <summary>
            执行命令
            </summary>
            <param name="mSqlInfo">SqlHelper信息对象</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            执行命令
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="connName">数据库连接字符串名称</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行命令
            </summary>
            <param name="strSql">Sql语句</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String)">
            <summary>
            执行命令
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数集合</param>
            <param name="connName">数据库连接字符串名称</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteNonQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行命令
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数集合</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(ThinkNet.Persistence.Core.SqlInfo,System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="mSqlInfo">SqlHelper信息对象</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(ThinkNet.Persistence.Core.SqlInfo)">
            <summary>
            读取一个数据
            </summary>
            <param name="mSqlInfo">SqlHelper信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(ThinkNet.Persistence.Core.SqlInfo,System.String)">
            <summary>
            读取数据表
            </summary>
            <param name="mSqlInfo">SqlHelper信息对象</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(ThinkNet.Persistence.Core.SqlInfo)">
            <summary>
            读取数据表
            </summary>
            <param name="mSqlInfo">命令SqlHelper信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(System.String,System.String)">
            <summary>
            读取数据表
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(System.String)">
            <summary>
            读取数据表
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String)">
            <summary>
            读取数据表
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据表
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(ThinkNet.Persistence.Core.SqlInfo,System.String)">
            <summary>
            读取数据集表
            </summary>
            <param name="mSqlInfo">命令SqlHelper信息对象</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(ThinkNet.Persistence.Core.SqlInfo)">
            <summary>
            读取数据集表
            </summary>
            <param name="mSqlInfo">命令SqlHelper信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(System.String,System.String)">
            <summary>
            读取数据集表
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(System.String)">
            <summary>
            读取数据集表
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter},System.String)">
            <summary>
            读取数据集表
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <param name="connName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集表
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数方法
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">参数大小</param>
            <param name="value">参数值</param>
            <param name="direction">参数类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数方法
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">参数大小</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlHelper.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数方法
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlInfo.#ctor(System.String,System.Boolean,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            构造一个SqlHelper信息对象
            </summary>
            <param name="sqlOrProcName">Sql语句或存储过程名</param>
            <param name="isProc">是否存储过程</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlInfo.#ctor(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            构造一个SqlHelper信息对象
            </summary>
            <param name="sqlOrProcName">Sql语句或存储过程名</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:ThinkNet.Persistence.Core.SqlInfo.#ctor">
            <summary>
            构造一个SqlHelper信息对象
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SqlInfo.SqlOrProcName">
            <summary>
            sql语句或存储过程名
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SqlInfo.IsProc">
            <summary>
            是否存储过程 
            </summary>
        </member>
        <member name="P:ThinkNet.Persistence.Core.SqlInfo.Parameters">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.ICommonQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.GetPagerTable(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页的SQL语句
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.GetSingleSequenceNumber(System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.GetNotrepeatSequenceNumber(System.String,System.String,System.String,System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="tableName">表名称</param>
            <param name="fieldName">编号字段名称</param>
            <param name="where">其它条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.GetMultiSequenceNumber(System.String,System.Int32)">
            <summary>
            获取多个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="quantity">数量</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteScalar(System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteDataTable(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteDataSet(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <param name="direction">输入或输出(ParameterDirection.Input/ParameterDirection.Output)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.ICommonQuery.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Query.Core.ICommonQuery.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.IDynamicQuery">
            <summary>
            查询接口,专为UI所用
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetSingleObject``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取一行数据，面向表单
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetPagerList``1(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页列表，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetList``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据列表，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetPagerTable``1(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetTable``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据集合，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetCount``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取记录数
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.Exists``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            是否存在
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetNextSequence``1">
            <summary>
            获取下一个序号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetNextSequence``1(System.Int32)">
            <summary>
            获取下一个序号
            </summary>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQuery.GetNextSequence``1(System.String)">
            <summary>
            获取下一个序号
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Query.Core.IDynamicQueryExtentions">
            <summary>
            扩展IDynamicQuery接口
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQueryExtentions.GetSingleObjectById``2(ThinkNet.Query.Core.IDynamicQuery,``1)">
            <summary>
            根据Id获取记录
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="thisQuery"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQueryExtentions.GetListAll``1(ThinkNet.Query.Core.IDynamicQuery)">
            <summary>
            获取所有记录列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisQuery"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQueryExtentions.GetTableAll``1(ThinkNet.Query.Core.IDynamicQuery)">
            <summary>
            获取所有记录集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisQuery"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IDynamicQueryExtentions.ExistsById``2(ThinkNet.Query.Core.IDynamicQuery,``1)">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.IQuery`1">
            <summary>
            查询接口,专为UI所用
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetSingleObject(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取一行数据，面向表单
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetPagerList(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页列表，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetList(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据列表，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetPagerTable(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetTable(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据集合，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetCount(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取记录数
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.Exists(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            是否存在
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetNextSequence">
            <summary>
            获取下一个序号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetNextSequence(System.Int32)">
            <summary>
            获取下一个序号
            </summary>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQuery`1.GetNextSequence(System.String)">
            <summary>
            获取下一个序号
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <!-- 对于成员“T:ThinkNet.Query.Core.IQueryExtentions”忽略有格式错误的 XML 注释 -->
        <member name="M:ThinkNet.Query.Core.IQueryExtentions.GetSingleObjectById``2(ThinkNet.Query.Core.IQuery{``0},``1)">
            <summary>
            根据Id获取记录
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TId"></typeparam>
            <param name="thisQuery"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQueryExtentions.GetListAll``1(ThinkNet.Query.Core.IQuery{``0})">
            <summary>
            获取所有记录列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisQuery"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQueryExtentions.GetTableAll``1(ThinkNet.Query.Core.IQuery{``0})">
            <summary>
            获取所有记录集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisQuery"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.IQueryExtentions.ExistsById``2(ThinkNet.Query.Core.IQuery{``0},``1)">
            <summary>
            是否存在
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.PageResult`1">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.PageResult`1.pageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.PageResult`1.pageSize">
            <summary>
            每页显示记录数
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.PageResult`1.totalRecord">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.PageResult`1.totalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.PageResult`1.collections">
            <summary>
            当前记录集合
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.PageResult`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.PageResult`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="totalRecord">总记录数</param>
            <param name="collections">当前记录集合</param>
        </member>
        <member name="M:ThinkNet.Query.Core.PageResult`1.ToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Json字符串
            </summary>
            <param name="elseArgs">其它需要一同生成Json的键值对</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.PageResult`1.ToString">
            <summary>
            Json字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.PageResult`1.ToEasyuiString">
            <summary>
            Json字符串(面向EasyUI的Grid)
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Query.Core.PageResult`1.PageIndex">
            <summary>
            当前页数
            </summary>
        </member>
        <member name="P:ThinkNet.Query.Core.PageResult`1.PageSize">
            <summary>
            每页显示记录数
            </summary>
        </member>
        <member name="P:ThinkNet.Query.Core.PageResult`1.TotalRecord">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:ThinkNet.Query.Core.PageResult`1.TotalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:ThinkNet.Query.Core.PageResult`1.Collections">
            <summary>
            当前记录集合
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.QueryParamater">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.QueryParamater.Where">
            <summary>
            where条件
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.QueryParamater.OrderType">
            <summary>
            排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.QueryParamater.Columns">
            <summary>
            字段名称(逗号分隔)
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.QueryParamater.OrderField">
            <summary>
            排序字段(注:可以直接加上DESC/ASC)
            </summary>
        </member>
        <member name="F:ThinkNet.Query.Core.QueryParamater.TableName">
            <summary>
            数据表名称
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create">
            <summary>
            创建查询条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create(System.String)">
            <summary>
            创建查询条件
            </summary>
            <param name="where">where条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create(System.String,System.Boolean)">
            <summary>
            创建查询条件
            </summary>
            <param name="where">where条件</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create(System.String,System.Boolean,System.String)">
            <summary>
            创建查询条件
            </summary>
            <param name="where">where条件</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create(System.String,System.Boolean,System.String,System.String)">
            <summary>
            创建查询条件
            </summary>
            <param name="where">where条件</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.QueryParamater.Create(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            创建查询条件
            </summary>
            <param name="where">where条件</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="columns">字段名称(逗号分隔)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <param name="tableName">数据表名称</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Query.Core.SQLCommonQueryBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStringName"></param>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.GetPagerTable(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页的SQL语句
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.GetSingleSequenceNumber(System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.GetNotrepeatSequenceNumber(System.String,System.String,System.String,System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="tableName">表名称</param>
            <param name="fieldName">编号字段名称</param>
            <param name="where">其它条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.GetMultiSequenceNumber(System.String,System.Int32)">
            <summary>
            获取多个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="quantity">数量</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteScalar(System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteDataTable(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteDataSet(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <param name="direction">输入或输出(ParameterDirection.Input/ParameterDirection.Output)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLCommonQueryBase.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Query.Core.SQLCommonQueryBase.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.#ctor(System.String,ThinkNet.Persistence.Core.IDAOCenter)">
            <summary>
            
            </summary>
            <param name="connectionStringName"></param>
            <param name="daoCenter"></param>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetSingleObject``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取一行数据，面向表单
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetPagerList``1(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页列表，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetList``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据列表，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetPagerTable``1(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetTable``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据集合，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetCount``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取记录数
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.Exists``1(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            是否存在
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetNextSequence``1">
            <summary>
            获取下一个序号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetNextSequence``1(System.Int32)">
            <summary>
            获取下一个序号
            </summary>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetNextSequence``1(System.String)">
            <summary>
            获取下一个序号
            </summary>
            <param name="where">条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetPagerTable(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页的SQL语句
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetSingleSequenceNumber(System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetNotrepeatSequenceNumber(System.String,System.String,System.String,System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="tableName">表名称</param>
            <param name="fieldName">编号字段名称</param>
            <param name="where">其它条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.GetMultiSequenceNumber(System.String,System.Int32)">
            <summary>
            获取多个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="quantity">数量</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteScalar(System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteDataTable(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteDataSet(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <param name="direction">输入或输出(ParameterDirection.Input/ParameterDirection.Output)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLDynamicQueryBase.CreateDAO``1">
            <summary>
            创建数据访问对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Query.Core.SQLDynamicQueryBase.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="T:ThinkNet.Query.Core.SQLQueryBase`1">
            <summary>
            数据查询抽象基类(基于SQLServer)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.#ctor(System.String,ThinkNet.Persistence.Core.IDAOCenter)">
            <summary>
            
            </summary>
            <param name="connectionStringName"></param>
            <param name="daoCenter"></param>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetSingleObject(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取一行数据，面向表单
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetPagerList(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页列表，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetList(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据列表，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetPagerTable(ThinkNet.Query.Core.QueryParamater,System.Int32,System.Int32)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="queryParamater">查询参数</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetTable(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取数据集合，面向不支持分页的表格或下拉框
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetCount(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            获取记录数
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.Exists(ThinkNet.Query.Core.QueryParamater)">
            <summary>
            是否存在
            </summary>
            <param name="queryParamater">查询参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetNextSequence">
            <summary>
            获取下一个序号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetNextSequence(System.Int32)">
            <summary>
            获取下一个序号
            </summary>
            <param name="parentId">父ID</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetPagerTable(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页集合，面向支持分页的表格
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetPagerSql(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            获取分页的SQL语句
            </summary>
            <param name="strSql">Sql语句</param>
            <param name="pageIndex">当前页数</param>
            <param name="pageSize">每页记录数</param>
            <param name="orderType">排序规则(true-降序；flase-升序)(注:orderField参数有多个或单个以DESC/ASC结尾时此参数无效)</param>
            <param name="orderField">排序字段(注:可以直接加上DESC/ASC)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetSingleSequenceNumber(System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetNotrepeatSequenceNumber(System.String,System.String,System.String,System.String)">
            <summary>
            获取单个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="tableName">表名称</param>
            <param name="fieldName">编号字段名称</param>
            <param name="where">其它条件</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.GetMultiSequenceNumber(System.String,System.Int32)">
            <summary>
            获取多个流水编号
            </summary>
            <param name="sequenceType">流水编号类别</param>
            <param name="quantity">数量</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteScalar(System.String)">
            <summary>
            读取一个数据
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteScalar(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取一个数据
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteDataTable(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteDataTable(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteDataSet(System.String)">
            <summary>
            读取数据集合
            </summary>
            <param name="strSql">Sql语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.ExecuteDataSet(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            读取数据集合
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="parameters">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.AddParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <param name="direction">输入或输出(ParameterDirection.Input/ParameterDirection.Output)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.AddInParameter(System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            添加输入参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.AddOutParameter(System.String,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加输出参数
            </summary>
            <param name="parameterName">参数名称</param>
            <param name="dbType">数据类型(如:SqlDbType.NVarChar)</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Query.Core.SQLQueryBase`1.CreateDAO">
            <summary>
            创建数据访问对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Query.Core.SQLQueryBase`1.ExternalConnectionStringsName">
            <summary>
            外部设置的数据库名称
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Core.ThreadExecuteService">
            <summary>
            线程执行服务抽象基类
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadExecuteService._mQueryParamater">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadExecuteService._mSimpleResult">
            <summary>
            简单结果描述
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Core.ThreadExecuteService._mMessageHandler">
            <summary>
            信息处理类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.Execute">
            <summary>
            执行方法
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.ExecuteOnce(System.Object,System.String)">
            <summary>
            执行一次
            </summary>
            <param name="parameter"></param>
            <param name="connectionStringName"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.GetDataTable(System.Boolean,System.Object)">
            <summary>
            获取线程需要处理的数据集合
            </summary>
            <param name="isExecuteOnce">是否执行一次</param>
            <param name="parameter">一次执行的参数</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.HandleData(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="data">线程需要处理的数据</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.ExecuteHandleData(ThinkNet.Infrastructure.Core.SimpleThread)">
            <summary>
            执行线程数据
            </summary>
            <param name="mThread">当前线程</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.WriteExceptionLog(System.Exception)">
            <summary>
            写错误日志
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Core.ThreadExecuteService.WriteExceptionLog(System.String)">
            <summary>
            写错误日志
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.ThreadID">
            <summary>
            线程ID号
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.MThread">
            <summary>
            线程
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.CommandBus">
            <summary>
            命令总线
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.QueryService">
            <summary>
            查询服务
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.LogManager">
            <summary>
            日志管理
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.JSonHelper">
            <summary>
            Json帮助
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.ConnectionStringsName">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Core.ThreadExecuteService.HandleType">
            <summary>
            线程要处理的数据类型(-1:无处理任何类型;0:集合类型)
            </summary>
        </member>
    </members>
</doc>
