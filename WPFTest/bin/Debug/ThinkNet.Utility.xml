<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkNet.Utility</name>
    </assembly>
    <members>
        <member name="T:ThinkNet.Utility.AES">
            <summary>
            高级加密标准,又称Rijndael加密法
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.AES.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.AES.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="M:ThinkNet.Utility.AES.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
            <param name="iv">矢量</param>
        </member>
        <member name="M:ThinkNet.Utility.AES.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.AES.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.AES.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.AES.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.AES.GetLegalKey">
            <summary>
            获得密钥数组
            </summary>
            <returns>密钥数组</returns>
        </member>
        <member name="M:ThinkNet.Utility.AES.GetLegalIV">
            <summary>
            获得初始向量IV数组
            </summary>
            <returns>初试向量IV数组</returns>
        </member>
        <member name="T:ThinkNet.Utility.CryptoFactory">
            <summary>
            加密工厂类
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.DES">
            <summary>
            数据加密标准，是一种使用密钥加密的块算法
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.DES.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.DES.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="M:ThinkNet.Utility.DES.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
            <param name="iv">矢量</param>
        </member>
        <member name="M:ThinkNet.Utility.DES.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DES.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DES.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DES.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DES.GetLegalKey">
            <summary>
            获得密钥数组
            </summary>
            <returns>密钥数组</returns>
        </member>
        <member name="M:ThinkNet.Utility.DES.GetLegalIV">
            <summary>
            获得初始向量IV数组
            </summary>
            <returns>初试向量IV数组</returns>
        </member>
        <member name="T:ThinkNet.Utility.CrytoType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.TripleDES">
            <summary>
            TripleDES
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.AES">
            <summary>
            AES（Rijndael）
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.DES">
            <summary>
            DES
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.CrytoType.RC2">
            <summary>
            RC2
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.ICrypto">
            <summary>
            加密接口
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ICrypto.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ICrypto.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ICrypto.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ICrypto.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.MD5">
            <summary>
            MD5加密算法
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.MD5.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.MD5.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MD5.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥(加密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MD5.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MD5.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥(解密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.RC2">
            <summary>
            RC2,一种传统对称分组加密算法，它可作为DES算法的建议替代算法
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RC2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RC2.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="M:ThinkNet.Utility.RC2.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
            <param name="iv">矢量</param>
        </member>
        <member name="M:ThinkNet.Utility.RC2.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.RC2.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.RC2.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.RC2.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.RC2.GetLegalKey">
            <summary>
            获得密钥数组
            </summary>
            <returns>密钥数组</returns>
        </member>
        <member name="M:ThinkNet.Utility.RC2.GetLegalIV">
            <summary>
            获得初始向量IV数组
            </summary>
            <returns>初试向量IV数组</returns>
        </member>
        <member name="T:ThinkNet.Utility.SHA1">
            <summary>
            SHA1，又叫安全哈希加密技术
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SHA1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SHA1.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA1.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥(加密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA1.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA1.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥(解密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.SHA256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SHA256.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SHA256.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA256.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥(加密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA256.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SHA256.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥(解密密钥为null)</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.TripleDES">
            <summary>
            3DES，三重数据加密算法
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="key">密钥</param>
            <param name="iv">矢量</param>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="plainText">明文</param>
            <param name="encryptKey">加密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="cryptoText">密文</param>
            <param name="decryptKey">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.GetLegalKey">
            <summary>
            获得密钥数组
            </summary>
            <returns>密钥数组</returns>
        </member>
        <member name="M:ThinkNet.Utility.TripleDES.GetLegalIV">
            <summary>
            获得初始向量IV数组
            </summary>
            <returns>初试向量IV数组</returns>
        </member>
        <member name="T:ThinkNet.Utility.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DatabaseType.MySQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DatabaseType.OleDB">
            <summary>
            OleDB
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DatabaseType.SQLLite">
            <summary>
            SQLLite
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DatabaseType.SQLServer">
            <summary>
            SQLServer
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DatabaseHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.MySQLHelper">
            <summary>
            数据访问基础类(基于MySQL)
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strConn">连接数据库字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.MySQLHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.OleDBHelper">
            <summary>
            数据访问基础类(基于OleDB)
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strConn">连接数据库字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OleDBHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.OracleHelper">
            <summary>
            数据访问基础类(基于Oracle)
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strConn">连接数据库字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.OracleHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.SQLLiteHelper">
            <summary>
            数据访问基础类(基于SQLite)
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strConn">连接数据库字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLLiteHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.SQLServerHelper">
            <summary>
            数据访问基础类(基于SQLServer)
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strConn">连接数据库字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行SQL语句返回受影响的行数
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteScalar(System.String)">
            <summary>
            执行SQL语句返回一个数据
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteTable(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteTable(System.String)">
            <summary>
            执行SQL语句返回结果集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SQLServerHelper.ExecuteTableByPage(System.String,System.Data.CommandType,System.Int32,System.Int32,System.Object[])">
            <summary>
            执行SQL语句,分页获取数据集
            </summary>
            <param name="strSql">要执行的SQL语句</param>
            <param name="cmdType">SQL语句的类型</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页数</param>
            <param name="paras">参数数组</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.ConvertChIAmountHelper">
            <summary>
            数字转中文,蔡庆军2011年4月2日
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.IsPositveDecimal(System.String)">
            
            判断是否是正数字字符串
            
            判断字符串
            如果是数字，返回true，否则返回false
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.ConvertData(System.String)">
            
            转换数字（整数）
            
            需要转换的整数数字字符串
            转换成中文大写后的字符串
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.ConvertXiaoShu(System.String)">
            
            转换数字（小数部分）
            
            需要转换的小数部分数字字符串
            转换成中文大写后的字符串
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.ConvertDigit(System.String)">
            
            转换数字
            
            转换的字符串（四位以内）
            
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.Convert4Digit(System.String)">
            
            转换四位数字
            
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.Convert3Digit(System.String)">
            
            转换三位数字
            
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.Convert2Digit(System.String)">
            
            转换二位数字
            
        </member>
        <member name="M:ThinkNet.Utility.ConvertChIAmountHelper.ConvertChinese(System.String)">
            
            将一位数字转换成中文大写数字
            
        </member>
        <member name="T:ThinkNet.Utility.ConvertDataTableToList">
            <summary>
            List DataTable 转换
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ConvertDataTableToList.ConvertTo``1(System.Data.DataTable)">
            <summary>
            Table转List
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConvertDataTableToList.ListToDataTable(System.Collections.IList)">
            <summary>
            将List集合类转换成DataTable 
            </summary>
            <param name="list">集合 </param>
            <returns>DataTable</returns>
        </member>
        <member name="T:ThinkNet.Utility.DTFormate">
            <summary>
            日期显示格式
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DTFormate.SHORT_EN_US">
            <summary>
            格式：2012-01-01
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DTFormate.SHORT_ZH_CN">
            <summary>
            //格式：2012年01月01日
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DTFormate.LONG_EN_US">
            <summary>
            //格式：2012-01-01 12：34：23
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.DTFormate.LONG_ZH_CN">
            <summary>
            //格式：2012年01月01日12时34分23秒
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt16(System.Object)">
            <summary>
            将object值转换为16位的整型值，失败则返回0
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt16(System.Object,System.Int16)">
            <summary>
            将object值转换为16位的整型值，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt32(System.Object)">
            <summary>
            将object值转换为32位的整型值，失败则返回0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt32(System.Object,System.Int32)">
            <summary>
            将object值转换为32位的整型值，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt64(System.Object)">
            <summary>
            将object值转换为64位的整型值，失败则返回0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToInt64(System.Object,System.Int64)">
            <summary>
            将object值转换为64位的整型值，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDouble(System.Object)">
            <summary>
            将object值转换成double类型，失败则返回0
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDouble(System.Object,System.Double)">
            <summary>
            将object值转换成double类型，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defautValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDecimal(System.Object)">
            <summary>
            将object值转换成decimal类型，失败则返回0
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将object值转换成decimal类型，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defautValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToBoolean(System.Object)">
            <summary>
            将object值转换成Boolean类型，失败则返回false
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将object值转换成Boolean类型，失败则返回false
            </summary>
            <param name="value">object类型的值</param>
            <param name="defautValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTime(System.Object)">
            <summary>
            将object值转换成DateTime类型，失败则返回DateTime.MinValue
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将object值转换成DateTime类型，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defautValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTime(System.Object,ThinkNet.Utility.DTFormate)">
            <summary>
            将object值转换成DateTime类型，失败则返回DateTime.MinValue
            </summary>
            <param name="value">转换对象</param>
            <param name="dtFormate">日期显示格式</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTime(System.Object,System.DateTime,ThinkNet.Utility.DTFormate)">
            <summary>
            将object值转换成DateTime类型，失败则返回DateTime.MinValue
            </summary>
            <param name="value">转换对象</param>
            <param name="defautValue">默认值</param>
            <param name="dtFormate">日期显示格式</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTimeOrNull(System.Object)">
            <summary>
            将object值转换成DateTime?类型，失败则返回null
            </summary>
            <param name="value">object类型的值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDateTimeOrNull(System.Object,System.Nullable{System.DateTime})">
            <summary>
            将object值转换成DateTime类型，失败则返回默认值
            </summary>
            <param name="value">object类型的值</param>
            <param name="defautValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.DateTimeToString(System.DateTime)">
            <summary>
            将DateTime转换成字符串，失败则返回空
            </summary>
            <param name="value">时间值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.DateTimeToString(System.Object)">
            <summary>
            将DateTime转换成字符串，失败则返回空
            </summary>
            <param name="value">时间值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.DateTimeToString(System.Object,ThinkNet.Utility.DTFormate)">
            <summary>
            将DateTime转换成字符串，失败则返回空
            </summary>
            <param name="value">转换对象</param>
            <param name="dtFormate">日期显示格式</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.DateTimeToString(System.DateTime,ThinkNet.Utility.DTFormate)">
            <summary>
            将DateTime转换成字符串，失败则返回空
            </summary>
            <param name="value">转换对象</param>
            <param name="dtFormate">日期显示格式</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDbType(System.Type)">
            <summary>
            将Type类型转换为DbType类型
            </summary>
            <param name="type">Type类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToType(System.String)">
            <summary>
            将字符串Type类型转换为Type类型
            </summary>
            <param name="strType">Type的字符串类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.FormatToSqlString(System.String)">
            <summary>
            格式化字符串为sql语句字符串,防止使用保留字，给所有字段加上[]
            </summary>
            <param name="strSql">sql字符串</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.EscapeToSqlString(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="strSql"></param>
            <param name="escape"></param>
            <param name="transferred"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.FormatToSqlCondiction(System.String,System.String)">
            <summary>
            格式化字符串为sql语句的条件
            </summary>
            <param name="field">字段项</param>
            <param name="value">字段值(如:eq_10)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToArray(System.String)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToArray(System.String,System.Char)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="value">字符串</param>
            <param name="split">间隔符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToIntArray(System.String)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToIntArray(System.String,System.Char)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="value">字符串</param>
            <param name="split">间隔符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDictionary(System.String)">
            <summary>
            将字符串类型转换成字典类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ToDictionary(System.String,System.Char,System.Char)">
            <summary>
            将字符串类型转换成字典类型
            </summary>
            <param name="value"></param>
            <param name="split"></param>
            <param name="split1"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ParseHttpRequestToObject``1(System.Web.HttpRequestBase)">
            <summary>
            将HttpRequest请求中的数据解释为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="httpRequest">请求数据</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ParseHttpRequestToObject``1(System.Web.HttpRequestBase,``0)">
            <summary>
            从页面提交的数据中解释对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="httpRequest">请求数据</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ParseFormToObject``1(System.Collections.Specialized.NameValueCollection,``0)">
            <summary>
            从表单提交的数据中解释对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fromData">表单数据</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.ParseFormToObject``1(System.Collections.Specialized.NameValueCollection)">
            <summary>
            从表单提交的数据中解释对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="formData">表单数据</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetRandomNumberByGuid(System.Int32)">
            <summary>
            根据GUID，得到不重复的随机数
            </summary>
            <param name="number">随机数位数</param>
            <returns>随机数</returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetStarDateOfYearAndMonth(System.Int32,System.Int32)">
            <summary>
            2 根据年月获取开始时间
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetEndDateOfYearAndMonth(System.Int32,System.Int32)">
            <summary>
            2.1 根据年月获取结束时间
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetStartDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            3 根据年,季度得到开始时间
            </summary>
            <param name="year"></param>
            <param name="quarter"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetEndDateOfQuarter(System.Int32,System.Int32)">
            <summary>
            3.1 根据年,季度得到最后一天
            </summary>
            <param name="year"></param>
            <param name="quarter"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetDateOfWeek(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            获取指定周数的开始日期和结束日期，开始日期为周日
            </summary>
            <param name="year">年份</param>
            <param name="week">周数</param>
            <param name="firstDate">当此方法返回时，则包含参数 year 和 index 指定的周的开始日期的 System.DateTime 值；如果失败，则为 System.DateTime.MinValue。</param>
            <param name="lastDate">当此方法返回时，则包含参数 year 和 index 指定的周的结束日期的 System.DateTime 值；如果失败，则为 System.DateTime.MinValue。</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetWeek">
            <summary>
            获取星期几
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetWeek(System.DateTime)">
            <summary>
            获取星期几
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetWeek(System.String)">
            <summary>
            获取星期几
            </summary>
            <param name="weekName">DayOfWeek的字符串形式,如：DateTime.Now.DayOfWeek.ToString()</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.CreateDataTable(System.String)">
            <summary>
            创建DataTable
            </summary>
            <param name="strColumns">逗号分隔的列名</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DataTypeConvert.GetArrayRowFieldValue(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="row">ArrayList行对象</param>
            <param name="fieldName">键名称</param>
            <returns>返回值</returns>
        </member>
        <member name="T:ThinkNet.Utility.ParameterValidator">
            <summary>
            参数验证
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsNumber(System.String)">
            <summary>
            验证输入字符串为数字
            </summary>
            <param name="strln">输入字符</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsDateTime(System.String)">
            <summary>
            判断用户输入是否为日期
            </summary>
            <param name="strln"></param>
            <returns></returns>
            <remarks>
            可判断格式如下（其中-可替换为/，不影响验证)
            YYYY | YYYY-MM | YYYY-MM-DD | YYYY-MM-DD HH:MM:SS | YYYY-MM-DD HH:MM:SS.FFF
            </remarks>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsMobile(System.String)">
            <summary>
            验证输入字符串为18位的手机号码
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsIDCard(System.String)">
            <summary>
            验证身份证是否有效
            </summary>
            <param name="strln"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsIDCard18(System.String)">
            <summary>
            验证输入字符串为18位的身份证号码
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsIDCard15(System.String)">
            <summary>
            验证输入字符串为15位的身份证号码
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsPhone(System.String)">
            <summary>
            验证输入字符串为电话号码
            </summary>
            <param name="P_str_phone">输入字符串</param>
            <returns>返回一个bool类型的值</returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsEmail(System.String)">
            <summary>
            验证是否是有效邮箱地址
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsFax(System.String)">
            <summary>
            验证是否是有效传真号码
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ParameterValidator.IsOnllyChinese(System.String)">
            <summary>
            验证是否只含有汉字
            </summary>
            <param name="strln">输入的字符</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.PinYinConverter">
            <summary>
            汉字拼音转换类
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.PinYinConverter.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.PinYinConverter.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.PinYinConverter.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:ThinkNet.Utility.PinYinConverter.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.PinYinConverter.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.PinYinConverter.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToDataTable(System.Type)">
            <summary>
            枚举转DataTable
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToDataTable(System.Type,System.Collections.Generic.List{System.String})">
            <summary>
            枚举转DataTable
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="ListExist">已存在的项</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean,System.String)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <param name="nullValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean,System.String,System.String)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <param name="nullValue"></param>
            <param name="nullText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean,System.Int32[])">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <param name="arrExcludeValues"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean,System.Int32[],System.String,System.String)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <param name="arrExcludeValues"></param>
            <param name="nullValue"></param>
            <param name="nullText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.EnumToList(System.Type,System.Boolean,System.Int32[],System.String,System.String,System.Boolean)">
            <summary>
            枚举转List
            </summary>
            <param name="enumType"></param>
            <param name="isNullSelect"></param>
            <param name="arrExcludeValues"></param>
            <param name="nullValue"></param>
            <param name="nullText"></param>
            <param name="isExclude"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.IsExitsValue(System.Int32,System.Int32[])">
            <summary>
            是否存在值项
            </summary>
            <param name="value"></param>
            <param name="arrEnumValues"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.GetEnumItemDesc(System.Type,System.Int32)">
            <summary>
            获取枚举项的描述
            </summary>
            <param name="enumType"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.GetEnumItemDesc(System.Type,System.String)">
            <summary>
            获取枚举项的描述
            </summary>
            <param name="enumType"></param>
            <param name="enumName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.GetEnumValueByDescription(System.Type,System.String)">
            <summary>
            根据描述获取枚举项的值
            </summary>
            <param name="enumType">枚举的类型</param>
            <param name="description">描述</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.GetAllEnumItemDesc(System.Type)">
            <summary>
            获取枚举项的描述
            </summary>
            <param name="enmItem">要返回描述的枚举项</param>
            <returns></returns>
            <summary>
            获取所有枚举项的描述
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.EnumHelper.GetEnumItemString(System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="desc"></param>
            <returns></returns>
        </member>
        <member name="P:ThinkNet.Utility.EnumItem.Value">
            <summary>
            枚举的值
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.EnumItem.Text">
            <summary>
            枚举的文本
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.GetDirectoryPath(System.String)">
            <summary>
            获取目录路径
            </summary>
            <param name="relativePath">相对路径(如：/App_Data/)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.CreateDirectoryByPath(System.String)">
            <summary>
            创建目录(如果目录已经存在,不创建,否则自动创建)
            </summary>
            <param name="path">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.IsExistDirectoryPath(System.String)">
            <summary>
            是否存在目录路径
            </summary>
            <param name="path">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.GetDirectoryFileCount(System.String)">
            <summary>
            目录下的文件数
            </summary>
            <param name="path">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.CreateDirectoryByFilePath(System.String)">
            <summary>
            根据文件路径创建目录
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.GetFileNameByFilePath(System.String)">
            <summary>
            根据文件路径获取文件名称
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.GetDirectoryFiles(System.String)">
            <summary>
            递归获取文件夹下的所有文件
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.CopyDirectory(System.String,System.String)">
            <summary>
            复制文件夹
            </summary>
            <param name="fromPath"></param>
            <param name="toPath"></param>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.MoveDirectory(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fromPath"></param>
            <param name="toPath"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.DirectoryHelper.ClearDirectory(System.String)">
            <summary>
            清空指定的文件夹，但不删除文件夹
            </summary>
            <param name="filePath">要清空的文件夹路径</param>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create(System.String,System.String)">
            <summary>
            创建XML文档并保存为文件
            </summary>
            <param name="xmlFileName">文件名称(包含路径)</param>
            <param name="rootName">根结点</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create(System.String,System.String,System.String)">
            <summary>
            创建XML文档并保存为文件
            </summary>
            <param name="xmlFileName">文件名称(包含路径)</param>
            <param name="rootName">根结点</param>
            <param name="encoding">GB2312或UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.LoadXmlDocument(System.String,System.String)">
            <summary>
            加载指定路径的XML文件(如果文件不存则自动创建空的文件)
            </summary>
            <param name="xmlFileName">xml文件路径（如：CurrentPath + "\\Xml4UserSetting.xml"）</param>
            <param name="rootName">根结点</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create">
            <summary>
            创建XML文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create(System.String,System.Xml.XmlElement@)">
            <summary>
            创建XML文档(输出根节点)
            </summary>
            <param name="rootName">根节点名称</param>
            <param name="rootElement">根节点</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create(System.String)">
            <summary>
            创建XML文档
            </summary>
            <param name="encoding">GB2312或UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Create(System.String,System.String,System.Xml.XmlElement@)">
            <summary>
            创建XML文档(输出根节点)
            </summary>
            <param name="encoding">GB2312或UTF-8</param>
            <param name="rootName">根节点名称</param>
            <param name="rootElement">根节点</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.CreateFromString(System.String)">
            <summary>
            创建XML文档
            </summary>
            <param name="xmlString">xml节点字符串(如：<book genre='novel' ISBN='1-861001-57-5'><title>Pride And Prejudice</title></book>)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.CreateFromString(System.String,System.String)">
            <summary>
            创建XML文档
            </summary>
            <param name="xmlString">xml节点字符串(如：<book genre='novel' ISBN='1-861001-57-5'><title>Pride And Prejudice</title></book>)</param>
            <param name="encoding">GB2312或UTF-8</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.AddRootChild(System.Xml.XmlDocument,System.String)">
            <summary>
            向XML文档添加根节点
            </summary>
            <param name="doc">XML文档</param>
            <param name="rootName">根节点名称</param>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.AddChild(System.Xml.XmlDocument,System.Xml.XmlElement,System.String)">
            <summary>
            向XML文档添加子节点
            </summary>
            <param name="doc">XML文档</param>
            <param name="parentXmlElement">父级节点</param>
            <param name="childName">子节点名称</param>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.AddChild(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            向XML文档添加子节点
            </summary>
            <param name="doc">XML文档</param>
            <param name="parentXmlElement">父级节点</param>
            <param name="childName">子节点名称</param>
            <param name="childValue">子节点值</param>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.ConertToString(System.Xml.XmlDocument)">
            <summary>
            将XML文档转为字符串形式
            </summary>
            <param name="doc">XML文档</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.ConertToString(System.String)">
            <summary>
            将XML文档转为字符串形式
            </summary>
            <param name="xmlString">xml节点字符串(如：<book genre='novel' ISBN='1-861001-57-5'><title>Pride And Prejudice</title></book>)</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.GetXmlContent(System.String)">
            <summary>
            获取xml文件中的所有内容
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Read(System.String,System.String,System.String)">
            <summary>
            读取数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            <returns>string</returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Serialize(System.Object)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Deserialize``1(System.String,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="xmlString">包含对象的XML字符串</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.Deserialize``1(System.String)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.SerializeEncrypt(System.String,System.Object)">
            <summary>
            XML序列化并加密
            </summary>
            <param name="xmlFileName">文件路径</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.DeserializeDecrypt``1(System.String)">
            <summary>
            解密并进行XML反序列化
            </summary>
            <param name="xmlFileName">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.SerializeFile(System.String,System.Object)">
            <summary>
            XML序列化
            </summary>
            <param name="xmlFileName">文件路径</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.XmlHelper.DeserializeFile``1(System.String)">
            <summary>
            解密并进行XML反序列化
            </summary>
            <param name="xmlFileName">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFolder(System.String,System.String)">
            <summary>
            压缩文件夹(含多层文件夹)
            </summary>
            <param name="folderPath">文件夹路径</param>
            <param name="zipFileName">压缩后文件</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFolder(System.String,System.String,System.String)">
            <summary>
            压缩文件夹(含多层文件夹)
            </summary>
            <param name="folderPath">文件夹路径</param>
            <param name="zipFileName">压缩后文件</param>
            <param name="password">加密密码</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFolder(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            压缩文件夹(含多层文件夹),递归遍历
            </summary>
            <param name="folderPath"></param>
            <param name="stream"></param>
            <param name="parentPath"></param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFile(System.String,System.String)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileName">文件</param>
            <param name="zipFileName">压缩后文件</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFile(System.String,System.String,System.String)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileName">文件</param>
            <param name="zipFileName">压缩后文件</param>
            <param name="password">加密密码</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFiles(System.Collections.ArrayList,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="fileNames">多个文件列表</param>
            <param name="zipFileName">压缩后文件</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipFiles(System.Collections.ArrayList,System.String,System.String)">
            <summary>
            压缩多个文件
            </summary>
            <param name="fileNames">多个文件列表</param>
            <param name="zipFileName">压缩后文件</param>
            <param name="password">加密密码</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.ZipSingleFile(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,ICSharpCode.SharpZipLib.Checksums.Crc32)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnZip(System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipFileName">压缩后的文件</param>
            <param name="unZipPath">解压后路径</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnZip(System.String,System.String,System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipFileName">压缩后的文件</param>
            <param name="unZipPath">解压后路径</param>
            <param name="password">解压密码</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnZip(System.String,System.String,System.Boolean)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipFileName">压缩后的文件</param>
            <param name="unZipPath">解压后路径</param>
            <param name="IsOverWrite">是否覆盖已存在的文件</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnZip(System.String,System.String,System.String,System.Boolean)">
            <summary>
            解压缩文件
            </summary>
            <param name="zipFileName">压缩后的文件</param>
            <param name="unZipPath">解压后路径</param>
            <param name="password">解压密码</param>
            <param name="IsOverWrite">是否覆盖已存在的文件</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnpackFile(System.String,System.String)">
             <summary>
            解压文件
             </summary>
             <param name="fileFromUnZip">解压前的文件路径（绝对路径）</param>
             <param name="fileToUnZip">解压后的文件目录（绝对路径）</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnpackRar(System.String,System.String)">
            <summary>
            解压rar格式的文件
            </summary>
            <param name="fileFromUnZip">解压前的文件路径（绝对路径）</param>
            <param name="fileToUnZip">解压后的文件目录（绝对路径）</param>
        </member>
        <member name="M:ThinkNet.Utility.ZipHelper.UnpackZip(System.String,System.String)">
            <summary>
             解压zip 文件
            </summary>
            <param name="fileFromUnZip">解压前的文件路径（绝对路径）</param>
            <param name="fileToUnZip">解压后的文件目录（绝对路径）</param>
        </member>
        <member name="T:ThinkNet.Utility.DateTimeConverter">
            <summary>
            日期类型转JSON
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.EnumTypeConverter">
            <summary>
            枚举类型转JSON
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.JsonToType``1(System.String)">
            <summary>
            把Json字符串形式转换为对象T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.TableToJson(System.Data.DataTable)">
            <summary>
            把datatable转换成json字符串
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ThinkNet.Utility.JSonHelper.JsonToTable(System.String)" -->
        <member name="M:ThinkNet.Utility.JSonHelper.Serialize(System.Object)">
            <summary>
            把对象转换为JSON
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.Deserialize``1(System.String)">
            <summary>
            把JSON数据转换为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonText"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.ToJson4EasyuiGrid(System.Collections.IEnumerable,System.Int32)">
            <summary>
            把列表对象转换为easyui-datagrid所需要的Json数据源
            </summary>
            <param name="objects"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.ToJson4EasyuiGrid(System.Data.DataTable,System.Int32)">
            <summary>
            把列表对象转换为easyui-datagrid所需要的Json数据源
            </summary>
            <param name="objects"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.JSonHelper.ToJson(System.Object)">
            <summary>
            把对象转换为Json字符串形式
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.JSonItem">
            <summary>
            通用JSon类描述
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.JSonItem.Description">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.JSonItem.CompareTo(System.Object)">
            <summary>
            排序
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.LogManager">
            <summary>
            日志操作类
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.HostService">
            <summary>
            HostService
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.HostService.Service">
            <summary>
            API服务实例
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.HostService.apiUrl">
            <summary>
            Api服务地址
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.HostService.GetHostInfo(System.String)">
            <summary>
            获得公司Host信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.GetCompanyAll(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="companyIds"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.GetHostInfo(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="companyId"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.GetHostInfo(System.String,System.Int32,System.Int32)">
            <summary>
            分页获得Host信息
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.GetHostInfo(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            分页获得Host信息
            </summary>
            <param name="key"></param>
            <param name="client"></param>
            <param name="link"></param>
            <param name="index"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.UpdateHostInfo(System.String,System.Object)">
            <summary>
            更新公司Host信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.SaveHostInfo(System.Object)">
            <summary>
            新增公司Host信息
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HostService.DeleteHostInfo(System.String,System.Int32)">
            <summary>
            删除公司Host信息
            </summary>
            <param name="companyId"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.Host">
            <summary>
            企业主机信息
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.HostId">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.CompanyId">
            <summary>
            公司Id
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.CompanyName">
            <summary>
            公司名称
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.SubDomain">
            <summary>
            二级域名
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.BandWidth">
            <summary>
            带宽
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.PublicIp">
            <summary>
            公网IP
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.LinkMode">
            <summary>
            连接模式
            1：反向代理 2：直接IP地址
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.ClientType">
            <summary>
            客户端类型
            1：Mobile 2：Client 4：Web
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.Inserted">
            <summary>
            创建时间(时间戳)
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Host.Localp">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.Result`1">
            <summary>
            返回信息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ThinkNet.Utility.Result`1.code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Result`1.data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Result`1.message">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.Result`1.errorReason">
            <summary>
            错误原因
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.PageHosts">
            <summary>
            分页Host
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.PageHosts.TotalCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.PageHosts.Hosts">
            <summary>
            Host数组
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.LinkModeEnum">
            <summary>
            连接模式
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.LinkModeEnum.Ngrok">
            <summary>
            反向代理
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.LinkModeEnum.Normal">
            <summary>
            直接IP
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.ClientTypeEunm">
            <summary>
            客户端类型
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.ClientTypeEunm.Mobile">
            <summary>
            移动端
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.ClientTypeEunm.Client">
            <summary>
            PC客户端
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.ClientTypeEunm.Web">
            <summary>
            Web端
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.HttpHelper">
            <summary>
            HttpHelper
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.HttpHelper.Put(System.String,System.Object,System.Int32)">
            <summary>
            Put
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HttpHelper.Get(System.String,System.String,System.Int32)">
            <summary>
            Get
            </summary>
            <param name="url"></param>
            <param name="userAgent"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HttpHelper.Post(System.String,System.Object,System.Int32)">
            <summary>
            Post
            </summary>
            <param name="url"></param>
            <param name="data"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.HttpHelper.Delete(System.String,System.Int32)">
            <summary>
            Delete
            </summary>
            <param name="url"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.UpdateServiceModelConfig(System.String,System.String,System.String)">
            <summary>
            修改system.serviceModel下所有服务终结点的IP地址
            </summary>
            <param name="configPath">Assembly.GetEntryAssembly().Location</param>
            <param name="serverIP"></param>
            <param name="serverPort"></param>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.IsSameServiceIP(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="configPath"></param>
            <param name="serverIP"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.GetServiceModelIP8Port(System.String)">
            <summary>
            获取WCF的IP地址和端口号
            </summary>
            <param name="configPath">Assembly.GetEntryAssembly().Location</param>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.UpdateConnectionStringsConfig(System.String,System.String,System.String,System.String)">
            <summary> 
            更新连接字符串  
            </summary> 
            <param name="configPath">Assembly.GetEntryAssembly().Location</param>
            <param name="connectionStringName">连接字符串名称</param> 
            <param name="connectionString">连接字符串内容</param> 
            <param name="providerName">数据提供程序名称</param> 
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.DeleteConnectionStringsConfig(System.String)">
            <summary>
            删除连接字符串
            </summary>
            <param name="configPath">Assembly.GetEntryAssembly().Location</param>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.DeleteConnectionStringsConfig(System.String,System.String)">
            <summary>
            删除连接字符串
            </summary>
            <param name="configPath">Assembly.GetEntryAssembly().Location</param>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.UpdateAppSettings(System.String,System.String,System.String)">
            <summary>
            更新appSettings配置的键值对
            </summary>
            <param name="configPath"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.GetAppSettingsConfig(System.String,System.String)">
            <summary>
            返回appSettings配置节的value值
            </summary>
            <param name="configPath"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.GetConnectionStringsConfig(System.String,System.String)">
            <summary>
            依据连接串名字connectionName返回数据连接字符串
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.ExistConnectionStringsConfig(System.String,System.String)">
            <summary>
            是否存在连接串名字为connectionName的连接字符串
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ConfigHelper.TestConntion(System.String)">
            <summary>
            测试与服务器数据库是否成功连接
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.IPHelper.GetHostName">
            <summary>
            获取本地计算机名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.IPHelper.GetLocalIPv4">
            <summary>
            获取本地IPv4的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.IPHelper.GetLocalIPv6">
            <summary>
            获取本地IPv6的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.IPHelper.GetWCFClientIP">
            <summary>
            在WCF服务端获取客户端的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.IPHelper.IsIp(System.String)">
            <summary>
            是否是IP地址
            </summary>
            <param name="ip">当前IP地址</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetCPU">
            <summary>
            获取CUP序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetDiskVolumeSerialNumber">
            <summary>
            获取硬盘的卷标号 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetMAC">
            <summary>
            获取Mac地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetRandomMachineNumberByMac8Disk">
            <summary>
            生成随机机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetRandomMachineNumberByCpu8Disk">
            <summary>
            生成随机机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetFixedMachineNumberByMac8Disk">
            <summary>
            生成固定机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetFixedMachineNumberByCpu8Disk">
            <summary>
            生成固定机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetRegisterNumber(System.String)">
            <summary>
            生成注册码
            </summary>
            <param name="machineNumber">机器码</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.LicenseHelper.GetRegisterNumber(System.String,System.String)">
            <summary>
            生成注册码
            </summary>
            <param name="machineNumber">机器码</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.RegDomain">
            <summary>
            注册表基项静态域
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegDomain.HKEY_CLASSES_ROOT">
            <summary>
            对应于HKEY_CLASSES_ROOT主键
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegDomain.HKEY_CURRENT_USER">
            <summary>
            对应于HKEY_CURRENT_USER主键
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegDomain.HKEY_LOCAL_MACHINE">
            <summary>
            对应于HKEY_LOCAL_MACHINE主键
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegDomain.HKEY_USERS">
            <summary>
            对应于HKEY_USERS主键
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegDomain.HKEY_CURRENT_CONFIG">
            <summary>
            对应于HKEY_CURRENT_CONFIG主键
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.RegValueKind">
            <summary>
            指定在注册表中存储值时所用的数据类型，或标识注册表中某个值的数据类型
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.Unknown">
            <summary>
            指示一个不受支持的注册表数据类型。例如，不支持 Microsoft Win32 API 注册表数据类型 REG_RESOURCE_LIST。使用此值指定
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.String">
            <summary>
            指定一个以 Null 结尾的字符串。此值与 Win32 API 注册表数据类型 REG_SZ 等效。
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.ExpandString">
            <summary>
            指定一个以 NULL 结尾的字符串，该字符串中包含对环境变量（如 %PATH%，当值被检索时，就会展开）的未展开的引用。
            此值与 Win32 API注册表数据类型 REG_EXPAND_SZ 等效。
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.Binary">
            <summary>
            指定任意格式的二进制数据。此值与 Win32 API 注册表数据类型 REG_BINARY 等效。
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.DWord">
            <summary>
            指定一个 32 位二进制数。此值与 Win32 API 注册表数据类型 REG_DWORD 等效。
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.MultiString">
            <summary>
            指定一个以 NULL 结尾的字符串数组，以两个空字符结束。此值与 Win32 API 注册表数据类型 REG_MULTI_SZ 等效。
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.RegValueKind.QWord">
            <summary>
            指定一个 64 位二进制数。此值与 Win32 API 注册表数据类型 REG_QWORD 等效。
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.RegisterHelper">
            <summary>
            注册表操作类
            主要包括以下操作：
            1.创建注册表项
            2.读取注册表项
            3.判断注册表项是否存在
            4.删除注册表项
            5.创建注册表键值
            6.读取注册表键值
            7.判断注册表键值是否存在
            8.删除注册表键值
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.CreateSubKey(System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            创建注册表项
            例子：如regDomain是HKEY_LOCAL_MACHINE，subkey是SOFTWARE\\higame\\，则将创建HKEY_LOCAL_MACHINE\\SOFTWARE\\higame\\注册表项
            </summary>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.IsSubKeyExist(System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            判断注册表项是否存在
            例子：如regDomain是HKEY_CLASSES_ROOT，subkey是SOFTWARE\\higame\\，则将判断HKEY_CLASSES_ROOT\\SOFTWARE\\higame\\注册表项是否存在
            </summary>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>返回注册表项是否存在，存在返回true，否则返回false</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.DeleteSubKey(System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            删除注册表项
            </summary>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>如果删除成功，则返回true，否则为false</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.IsRegeditKeyExist(System.String,System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            判断键值是否存在
            </summary>
            <param name="name">键值名称</param>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>返回键值是否存在，存在返回true，否则返回false</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.WriteRegeditKey(System.String,System.Object,ThinkNet.Utility.RegValueKind,System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            设置指定的键值内容，指定内容数据类型
            存在改键值则修改键值内容，不存在键值则先创建键值，再设置键值内容
            </summary>
            <param name="name">键值名称</param>
            <param name="content">键值内容</param>
            <param name="regValueKind"></param>
            <param name="subKey"></param>
            <param name="regDomain"></param>
            <returns>键值内容设置成功，则返回true，否则返回false</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.ReadRegeditKey(System.String,System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            读取键值内容
            </summary>
            <param name="name">键值名称</param>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>返回键值内容</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.DeleteRegeditKey(System.String,System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            删除键值
            </summary>
            <param name="name">键值名称</param>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>如果删除成功，返回true，否则返回false</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.GetRegDomain(ThinkNet.Utility.RegDomain)">
            <summary>
            获取注册表基项域对应顶级节点
            例子：如regDomain是ClassesRoot，则返回Registry.ClassesRoot
            </summary>
            <param name="regDomain">注册表基项域</param>
            <returns>注册表基项域对应顶级节点</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.GetRegValueKind(ThinkNet.Utility.RegValueKind)">
            <summary>
            获取在注册表中对应的值数据类型
            例子：如regValueKind是DWord，则返回RegistryValueKind.DWord
            </summary>
            <param name="regValueKind">注册表数据类型</param>
            <returns>注册表中对应的数据类型</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.OpenSubKey(System.String,ThinkNet.Utility.RegDomain)">
            <summary>
            打开注册表项节点，以只读方式检索子项
            虚方法，子类可进行重写
            </summary>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <returns>如果SubKey为空、null或者SubKey指示注册表项不存在，则返回null，否则返回注册表节点</returns>
        </member>
        <member name="M:ThinkNet.Utility.RegisterHelper.OpenSubKey(System.String,ThinkNet.Utility.RegDomain,System.Boolean)">
            <summary>
            打开注册表项节点
            虚方法，子类可进行重写
            </summary>
            <param name="subKey">注册表项名称</param>
            <param name="regDomain">注册表基项域</param>
            <param name="writable">如果需要项的写访问权限，则设置为 true</param>
            <returns>如果SubKey为空、null或者SubKey指示注册表项不存在，则返回null，否则返回注册表节点</returns>
        </member>
        <member name="T:ThinkNet.Utility.ReflectHelper">
            <summary>
            反射帮助类
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.GetProperties(System.String)">
            <summary>
            获取对象的属性
            </summary>
            <param name="className">类名</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.GetValue(System.Object,System.String)">
            <summary>
            获取属性值，如果不可读，则返回null
            </summary>
            <param name="target"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取属性值，如果不可读，则返回null
            </summary>
            <param name="target"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.SetValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值，如果该属性为只读，则跳过不赋值
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.SetValue(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            设置属性值，如果该属性为只读，则跳过不赋值
            </summary>
            <param name="obj"></param>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThinkNet.Utility.ReflectHelper.GetValueByType(System.Object,System.Type)">
            <summary>
            把object，string对象转换成指定类型对象
            </summary>
            <param name="value"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.RegexAttribute">
            <summary>
            正则表达式特性
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexAttribute.Regex">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexAttribute.ErrorDesc">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.RegexHelper">
            <summary>
            正则表达式帮助类
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.IsMatch(System.String,System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.GetText(System.String,System.String,System.Int32)">
            <summary>
            单个匹配内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="iGroupIndex">分组序号, 从1开始, 0不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.GetText(System.String,System.String,System.String)">
            <summary>
            单个匹配内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="strGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.GetList(System.String,System.String,System.Int32)">
            <summary>
            多个匹配内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="iGroupIndex">第几个分组, 从1开始, 0代表不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.GetList(System.String,System.String,System.String)">
            <summary>
            多个匹配内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="strGroupName">分组名, ""代表不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            替换指定内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="strReplace">替换值</param>
            <param name="iGroupIndex">分组序号, 0代表不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.Replace(System.String,System.String,System.String,System.String)">
            <summary>
            替换指定内容
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="strReplace">替换值</param>
            <param name="strGroupName">分组名, "" 代表不分组</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.Split(System.String,System.String,System.Int32)">
            <summary>
            分割
            </summary>
            <param name="strInput">输入内容</param>
            <param name="strRegex">表达式字符串</param>
            <param name="iStrLen">最小保留字符串长度</param>
        </member>
        <member name="M:ThinkNet.Utility.RegexHelper.GetRegexItem``1(System.String)">
            <summary>
            正则表达式项
            </summary>
            <param name="name">正则表达式属性名称</param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.RegexItem">
            <summary>
            正则表达式项
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexItem.Regex">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexItem.ErrorDesc">
            <summary>
            错误描述
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RegexItem.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.RegexItem.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="regex">正则表达式</param>
            <param name="description">描述</param>
            <param name="errorDesc">错误描述</param>
        </member>
        <member name="T:ThinkNet.Utility.RegexRule">
            <summary>
            通用正则表达式规则
            </summary>
        </member>
        <member name="P:ThinkNet.Utility.RegexRule.Number">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.FrmSplash">
            <summary>
            闪动窗口，继承ISplashUI接口,
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.FrmSplash.#ctor">
            <summary>
            闪动窗口，继承ISplashUI接口
            </summary>
        </member>
        <member name="F:ThinkNet.Utility.FrmSplash.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.FrmSplash.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:ThinkNet.Utility.FrmSplash.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:ThinkNet.Utility.ISplashUI">
            <summary>
            闪动窗口接口
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.ISplashUI.SetInformation(System.String)">
            <summary>
            设置信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:ThinkNet.Utility.Splasher">
            <summary>
            Splasher类，可以显示、关闭闪动屏幕及设置动态信息
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.Splasher.Show(System.Type)">
            <summary>
            显示闪动窗口画面,该窗口要继承ISplashUI接口
            </summary>
            <param name="splashFormType">闪动窗口画面(继承ISplashUI接口)的类型</param>
        </member>
        <member name="P:ThinkNet.Utility.Splasher.Information">
            <summary>
            状态属性，设置动态信息
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.Splasher.Close">
            <summary>
            关闭闪动窗口画面
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.Splasher.CreateInstance(System.Type)">
            <summary>
            创建闪动窗口实例
            </summary>
            <param name="formType"></param>
        </member>
        <member name="T:ThinkNet.Utility.ValidateCode">
             <summary>
            随机码和图片流生成
             </summary>
        </member>
        <member name="M:ThinkNet.Utility.ValidateCode.CreateValidateGraphic(System.String@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            生成图形验证码。
            </summary>
            <param name="Code">传出验证码。</param>
            <param name="CodeLength">数字元素。</param>
            <param name="Width"></param>
            <param name="Height"></param>
            <param name="FontSize"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ValidateCode.GetRandomCode(System.Int32)">
            <summary>
            生成随机数
            </summary>
            <param name="CodeLength"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.ValidateCode.GetRandomNumber(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="CodeLength"></param>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Utility.CacheHelper">
            <summary>
            缓存辅助类
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.GetCache(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="CacheKey">键</param>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.CookieHelper.ClearCookie(System.String)">
            <summary>
            清除指定Cookie
            </summary>
            <param name="cookiename">cookiename</param>
        </member>
        <member name="M:ThinkNet.Utility.CookieHelper.GetCookieValue(System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookiename">cookiename</param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie（24小时过期）
            </summary>
            <param name="cookiename"></param>
            <param name="cookievalue"></param>
        </member>
        <member name="M:ThinkNet.Utility.CookieHelper.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            添加一个Cookie
            </summary>
            <param name="cookiename">cookie名</param>
            <param name="cookievalue">cookie值</param>
            <param name="expires">过期时间 DateTime</param>
        </member>
        <member name="T:ThinkNet.Utility.SessionHelper">
            <summary>
            Session 操作类
            1、GetSession(string name)根据session名获取session对象
            2、SetSession(string name, object val)设置session
            </summary>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.GetSession(System.String)">
            <summary>
            根据session名获取session对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.SetSession(System.String,System.Object)">
            <summary>
            设置session
            </summary>
            <param name="name">session 名</param>
            <param name="val">session 值</param>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Add(System.String,System.String)">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Adds(System.String,System.String[])">
            <summary>
            添加Session，调动有效期为20分钟
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Add(System.String,System.String,System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValue">Session值</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Adds(System.String,System.String[],System.Int32)">
            <summary>
            添加Session
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <param name="strValues">Session值数组</param>
            <param name="iExpires">调动有效期（分钟）</param>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Get(System.String)">
            <summary>
            读取某个Session对象值
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值</returns>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Gets(System.String)">
            <summary>
            读取某个Session对象值数组
            </summary>
            <param name="strSessionName">Session对象名称</param>
            <returns>Session对象值数组</returns>
        </member>
        <member name="M:ThinkNet.Utility.SessionHelper.Del(System.String)">
            <summary>
            删除某个Session对象
            </summary>
            <param name="strSessionName">Session对象名称</param>
        </member>
    </members>
</doc>
